<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Divengine Open Source]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Divengine Open Source</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sun, 17 Mar 2024 01:56:31 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 17 Mar 2024 01:56:31 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[Divengine Open Source]]></title><description><![CDATA[ 
 <br><a href="https://stardev.io/developers/divengine" target="_blank" rel="noopener"></a><img src="https://stardev.io/developers/divengine/badge/languages/global.svg" alt="Check out divengine's profile on stardev.io" referrerpolicy="no-referrer"><br>
<br><a data-href="Documentation" href="\documentation\documentation.html" class="internal-link" target="_self" rel="noopener">Documentation</a>
<br><a data-href="Tools" href="\tools\tools.html" class="internal-link" target="_self" rel="noopener">Tools</a>
<br><a data-href="Videos" href="\videos\videos.html" class="internal-link" target="_self" rel="noopener">Videos</a>
]]></description><link>index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Sat, 16 Mar 2024 18:34:07 GMT</pubDate><enclosure url="https://stardev.io/developers/divengine/badge/languages/global.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://stardev.io/developers/divengine/badge/languages/global.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Div PHP Ajax Mapping]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://github.com/anuraghazra/github-readme-stats" rel="noopener" class="external-link" href="https://github.com/anuraghazra/github-readme-stats" target="_blank"></a><img alt="Readme Card" src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=ajaxmap&amp;show_owner=true&amp;rand=23" referrerpolicy="no-referrer"><br>
Library for JavaScript and PHP, that allow mapping the PHP functions, static methods of classes and arbitrary data. This class provides a simpler solution to return registered data without having to register a specific function.<br>Mapping PHP data, functions and methods in JavaScript<br>An open source library for JavaScript and PHP, that allow mapping the PHP functions, static methods of classes and arbitrary data when instance a JavaScript class.<br>With this class you can call a functions and methods via AJAX.<br>For example:<br>Server side:<br>server.php<br>&lt;?php

use divengine\ajaxmap;

function sum($x, $y){
  return $x + $y; 
}

class Enterprise{
  public static function getEmployees(){
      return [
        ["name" =&gt; "Thomas Hardy", "salary" =&gt; 1500],  
        ["name" =&gt; "Christina Berglund", "salary" =&gt; 1200] 
      ];  
    } 
}

// Server instance ...

$server = new ajaxmap(); 

// ... Add methods ...

$server-&gt;addMethod("sum"); 
$server-&gt;addClass("Enterprise); 

// ... and go!
$server-&gt;go(); 
Copy<br>Client side:<br>index.html<br>&lt;script type = "text/javascript" src="ajaxmap.js"&gt;&lt;/script&gt;
&lt;script type = "text/javascript"&gt;
    var map = new ajaxmap("server.php");
    var sum = map.sum(20, 10);
    var employees = map.Enterprise.getEmployees();
    var firstEmployeeName = employees[0]['name'];
&lt;/script&gt;
Copy]]></description><link>documentation\div-php-ajax-mapping\div-php-ajax-mapping.html</link><guid isPermaLink="false">Documentation/Div PHP Ajax Mapping/Div PHP Ajax Mapping.md</guid><pubDate>Sat, 24 Feb 2024 02:18:29 GMT</pubDate><enclosure url="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=ajaxmap&amp;show_owner=true&amp;rand=23" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=ajaxmap&amp;show_owner=true&amp;rand=23"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Analogy with Java]]></title><description><![CDATA[ 
 <br>You actually can switch on enums, but you can't switch on Strings until Java 7. You might consider using polymorphic method dispatch with Java enums rather than an explicit switch. Note that enums are objects in Java, not just symbols for ints like they are in C/C++. You can have a method on an enum type, then instead of writing a switch, just call the method - one line of code: done!<br>public enum Temperature {
    HOT {
        @Override
        public void whatShouldIdo() {
            System.out.println("Drink a bear!");
        }
    },
    COLD {
        @Override
        public void whatShouldIdo() {
             System.out.println("Wear a coat!");
        }
    };

    public abstract void whatShouldIdo();
}

// ...

void aMethodSomewhere(final Temperature temperature) {
    doSomeStuff();
    temperature.whatShouldIdo(); // here is where the switch would be, now it's one line of code!
    doSomeOtherStuff();
}
Copy<br>One of the nice things about this approach is that it is simply impossible to get certain types of errors. You can't miss a switch case (you can incorrectly implement a method for a particular constant, but there's nothing that will ever totally prevent that from happening!). There's no switch "default" to worry about. Also, I've seen code that puts enum constants into arrays and then indexes into the arrays - this opens the possibility of array index out of bounds exceptions - just use the enum! Java enums are very, very powerful. Learn all that you can about them to use them effectively.<br>Also note if you have several enum constants that all have the same behavior for a particular method (like days of the week, in which weekend days have the same behavior and the weekdays Tuesday through Thursday also share the same behavior), you can simply gather that shared code in an enum method that is not overridden by every constant (final protected) and then call that method from the appropriate methods. So, add "final protected void commonMethod() { ... }" and then the implementation of method() in each constant would just call commonMethod().<br>And.... what about PHP ? This is a similar solution ...<br>&lt;?php

abstract class Temperature extends divengine\enum {
  public function whatShouldIdo() {}
}

class HOT extends Temperature {
  public function whatShouldIdo() {
    echo "Drink a bear!";
  }
}

class COLD extends Temperature {
  public function whatShouldIdo() {
    echo "Wear a coat!";
  }
}

// ....

function someStuff(Temperature $t) {
  $t-&gt;whatShouldIdo();
}

someStuff( new HOT() );
Copy]]></description><link>documentation\div-php-enum-solution\analogy-with-java.html</link><guid isPermaLink="false">Documentation/Div PHP Enum Solution/Analogy with Java.md</guid><pubDate>Sun, 28 Jan 2024 14:04:05 GMT</pubDate></item><item><title><![CDATA[Div PHP Enum Solution]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://github.com/anuraghazra/github-readme-stats" rel="noopener" class="external-link" href="https://github.com/anuraghazra/github-readme-stats" target="_blank"></a><img alt="Readme Card" src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=enum&amp;show_owner=true&amp;rand=23" referrerpolicy="no-referrer"><br>
This is a PHP Enum Solution using classes and type hinting.&nbsp;Also you can build a taxonomies of enums!<br>An enumeration type, "enum" for short, is a data type to categorise named values. Enums can be used instead of hard coded strings to represent, for example, the status of a blog post in a structured and typed way.<br>In July 2019, I wrote a gist searching a solution for this.<br><a rel="noopener" class="external-link" href="https://gist.github.com/rafageist/aef9825b7c935cdeb0c6187a2d363909/revisions" target="_blank">https://gist.github.com/rafageist/aef9825b7c935cdeb0c6187a2d363909/revisions</a><br>Then I convert the gist in a real project.&nbsp;<a rel="noopener" class="external-link" href="https://www.phpclasses.org/package/11366-PHP-Implement-enumerated-values-using-classes.html" target="_blank">https://www.phpclasses.org/package/11366-PHP-Implement-enumerated-values-using-classes.html</a><br><br>Before 8.1, PHP didn't have a native enum type, only a very basic SPL implementation (<a rel="noopener" class="external-link" href="https://www.php.net/manual/en/class.splenum.php" target="_blank">https://www.php.net/manual/en/class.splenum.php</a>), but this really doesn't cut the mustard.&nbsp;Some solutions using constants, but not resolve the problem. How to validate HOT or COLD ?<br>&lt;?php

const HOT = 1;
const COLD = 2;

const FIRE = 1;
const ICE = 2;

function doSomething(int $temperature) { /* ... */}

doSomething(FIRE);
Copy<br>From 8.1, PHP have a enums implementation (<a rel="noopener" class="external-link" href="https://www.php.net/manual/en/language.types.enumerations.php" target="_blank">https://www.php.net/manual/en/language.types.enumerations.php</a>).&nbsp;And now you can combine this solution with the new features of PHP.<br>There's a popular package called&nbsp;myclabs/php-enum. It's really awesome, but have a problem because we lose static analysis benefits like auto completion and refactoring.<br><br>Use PHP!<br>The class&nbsp;divengine\enum&nbsp;help you, but remember:&nbsp;the most important solution is the concept of this library.<br>With this class, you can solves the following problems:<br>
<br>Constants with different names and equal value can be used as function arguments
<br>Lose static analysis benefits like auto completion and refactoring
<br>Maintaining duplicated code when use docblock type hints to solve the first problem
<br>We need have built-in enums in PHP ! But, for now, this is a solution.<br><br>Composer:<br>composer require divengine\enum;
Copy<br>Manual:<br>Clone the repo:<br>git clone https://github.com/divengine/enum
Copy<br>Include the lib:<br>include "/path/to/divengine/enum/src/folder/enum.php";
Copy<br><a data-href="Example of Div PHP Enum" href="\documentation\div-php-enum-solution\example-of-div-php-enum.html" class="internal-link" target="_self" rel="noopener">Example of Div PHP Enum</a><br>
<a data-href="Analogy with Java" href="\documentation\div-php-enum-solution\analogy-with-java.html" class="internal-link" target="_self" rel="noopener">Analogy with Java</a>]]></description><link>documentation\div-php-enum-solution\div-php-enum-solution.html</link><guid isPermaLink="false">Documentation/Div PHP Enum Solution/Div PHP Enum Solution.md</guid><pubDate>Sat, 24 Feb 2024 02:18:08 GMT</pubDate><enclosure url="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=enum&amp;show_owner=true&amp;rand=23" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=enum&amp;show_owner=true&amp;rand=23"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Example of Div PHP Enum]]></title><description><![CDATA[ 
 <br>First, define your enums. You can build a taxonomy !!!:<br>Enums.php<br>&lt;?php

namespace MyEnums;

use divengine\enum;

class Temperature extends enum {/* Father of all types of temperatures */}
class ExtremeTemperature extends Temperature {/* Father of all types of extreme temperatures */}
class FIRE extends ExtremeTemperature {}
class ICE extends ExtremeTemperature {}

class NormalTemperature extends Temperature {/* Father of all types of normal temperatures */}
class HOT extends NormalTemperature {}
class COOL extends NormalTemperature {}
class COLD extends NormalTemperature {}
Copy<br>Second, use your enums:<br>&lt;?php

use MyEnums;


// Constants are good tricks, but optional
const COOL = COOL::class;

class AllTemperatures {
    const COOL = COOL::class; // maybe better
    const HOT = 'Enums\\HOT';  // ugly !!!

    //...
}

// Define some function with type hinting
function WhatShouldIdo(Temperature $temperature)
{
    switch (true) {
        case $temperature instanceof ExtremeTemperature:
            switch (true) {
                case $temperature instanceof FIRE:
                    return "Call the fire department";

                case $temperature instanceof ICE:
                    return "Warm up";
            }
            break;

        case $temperature instanceof NormalTemperature:
            switch ($temperature) {

                case HOT::class: // compare using classname
                    return "Drink a beer :D";

                case COOL or AllTemperatures::COOL: // compare using constants
                    return "Just go away !";

                case 'Enums\\COLD': // compare using string, ugly !!!
                    return "Wear a coat";
            }

            break;
    }

    return "I don't know";
}

// Call to function with a instance of any Temperature
echo WhatShouldIdo(new HOT()) . PHP_EOL;
Copy]]></description><link>documentation\div-php-enum-solution\example-of-div-php-enum.html</link><guid isPermaLink="false">Documentation/Div PHP Enum Solution/Example of Div PHP Enum.md</guid><pubDate>Sun, 28 Jan 2024 14:03:21 GMT</pubDate></item><item><title><![CDATA[Simple matrix]]></title><description><![CDATA[ 
 <br><br>&lt;?php

include "matrix.php";

use divengine\matrix;

// simple list of nums
$nums = new matrix([
    ["", 1, 2, 3],
    ["", 4, 5, 6]
]);

// get item
echo $nums-&gt;get(1, 3); // 6

// set item
$nums-&gt;set(1, 3, 10);

echo $nums-&gt;formatTXT();
Copy]]></description><link>documentation\div-php-matrix\features\simple-matrix.html</link><guid isPermaLink="false">Documentation/Div PHP Matrix/Features/Simple matrix.md</guid><pubDate>Thu, 01 Feb 2024 15:12:03 GMT</pubDate></item><item><title><![CDATA[Div PHP Matrix]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://github.com/anuraghazra/github-readme-stats" rel="noopener" class="external-link" href="https://github.com/anuraghazra/github-readme-stats" target="_blank"></a><img alt="Readme Card" src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=matrix&amp;show_owner=true&amp;rand=23" referrerpolicy="no-referrer"><br>
This dynamic matrix manipulation class in PHP goes beyond conventional operations, offering dynamic calculations and diverse output formats for versatile applications.<br>It introduces a layer of dynamic logic where cells execute functions, allowing for flexible backend logic. The true power lies in crafting robust backend logic, akin to spreadsheet functionalities tailored for web development. Automatic recalculation is notable, but its strength lies in facilitating complex business logic.<br>Consider it as a tool for architecting backend logic using a spreadsheet-like paradigm. Dynamic calculations create interconnected matrices, triggering logical events across cells and matrices seamlessly.<br>The library empowers developers to create responsive systems, adapting to user interactions. Exporting data in various formats, including XML and JSON, extends its utility in web development.<br>A cell's ability to execute dynamic logic is a game-changer, allowing intricate and adaptable behavior defined by a function. Activating or deactivating cells opens possibilities to tailor business logic on-the-fly.<br>In essence, Div PHP Matrix Library not only facilitates dynamic recalculations but empowers adaptive backend logic. Its fluid response, driven by cell activation and deactivation, showcases potential in crafting dynamic applications.<br>The library seamlessly integrates with other divengine/* projects (div, ways, nodes, ajaxmap &amp; orm), forming a comprehensive and non-obtrusive toolkit for PHP developers, enhancing dynamic backend capabilities.]]></description><link>documentation\div-php-matrix\div-php-matrix.html</link><guid isPermaLink="false">Documentation/Div PHP Matrix/Div PHP Matrix.md</guid><pubDate>Sat, 24 Feb 2024 02:17:49 GMT</pubDate><enclosure url="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=matrix&amp;show_owner=true&amp;rand=23" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=matrix&amp;show_owner=true&amp;rand=23"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Getting started]]></title><description><![CDATA[ 
 <br><br>composer require divengine/matrix
Copy]]></description><link>documentation\div-php-matrix\getting-started.html</link><guid isPermaLink="false">Documentation/Div PHP Matrix/Getting started.md</guid><pubDate>Wed, 31 Jan 2024 04:46:28 GMT</pubDate></item><item><title><![CDATA[Matrix features]]></title><description><![CDATA[ 
 <br><a data-href="Simple matrix" href="\documentation\div-php-matrix\features\simple-matrix.html" class="internal-link" target="_self" rel="noopener">Simple matrix</a>]]></description><link>documentation\div-php-matrix\matrix-features.html</link><guid isPermaLink="false">Documentation/Div PHP Matrix/Matrix features.md</guid><pubDate>Wed, 31 Jan 2024 04:43:50 GMT</pubDate></item><item><title><![CDATA[Div PHP ORM]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://github.com/anuraghazra/github-readme-stats" rel="noopener" class="external-link" href="https://github.com/anuraghazra/github-readme-stats" target="_blank"></a><img alt="Readme Card" src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=orm&amp;show_owner=true&amp;rand=23" referrerpolicy="no-referrer"><br>
This class allow to you make a mapping between your database objects and your PHP objects. You can implement your model inheriting from divengine\orm. Look at the following example as it implements a hierarchy of classes (scheme, map, collection, entitlement) and all inherit from the same divengine\orm class.<br>&lt;?php 

use divengine\orm; 

class PublicMap extends orm
{
    protected $__map_type = self::SCHEMA;
    protected $__map_schema = 'public';
    protected $__map_identity = 'id = :id';
}  

class PersonMap extends PublicMap
{
    protected $__map_type = self::RECORD;
    protected $__map_name = 'person';
    protected $__map_class = Person::class;
}

class Person extends PersonMap {
    private $id = self::AUTOMATIC;
    private $name;
    public function getId() {
        return $this-&gt;id;
    }

	public function setId($id) {
        $this-&gt;id = $id;
    } 

    public function getName() {
        return $this-&gt;name;
    }

    public function setName($name) {
        $this-&gt;name = $name;
    }
}

class PersonCollection extends PersonMap {
    protected $__map_type = self::TABLE;
}  

Copy<br>Now look at an example of how to use your model:<br>&lt;?php  

use divengine\orm;

$pdo = new PDO(); // or use orm::buildPDO();
orm::connectGlobal($pdo); // or pass true to second param of orm::buildPDO()

$person = new Person(['name' =&gt; 'Peter']);
// $person::connect($pdo);

$person-&gt;insert();

$list = new PersonCollection();
$list-&gt;addItem($person);

$entity = $list-&gt;getFirstItem('id = ?', [100]);
Copy]]></description><link>documentation\div-php-orm\div-php-orm.html</link><guid isPermaLink="false">Documentation/Div PHP ORM/Div PHP ORM.md</guid><pubDate>Sat, 24 Feb 2024 02:17:32 GMT</pubDate><enclosure url="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=orm&amp;show_owner=true&amp;rand=23" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=orm&amp;show_owner=true&amp;rand=23"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Appendix A - Allowed PHP functions]]></title><description><![CDATA[ 
 <br>These are the PHP functions that can be used in&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/appendixes/appendix-allowed-php-functions#conditions" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/appendixes/appendix-allowed-php-functions#conditions" target="_blank">conditions</a>,&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/appendixes/appendix-allowed-php-functions#formulas" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/appendixes/appendix-allowed-php-functions#formulas" target="_blank">formulas</a>&nbsp;and another expressions in the templates:<br>]]></description><link>documentation\div-php-template-engine\appendixes\appendix-a-allowed-php-functions.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Appendixes/Appendix A - Allowed PHP functions.md</guid><pubDate>Sun, 28 Jan 2024 14:34:14 GMT</pubDate></item><item><title><![CDATA[Appendix B - Comparison of syntax of Smarty and Div]]></title><description><![CDATA[ 
 <br><br>Smarty:<br>{foreach $foo as $bar}
	  &lt;a href="{$bar.zig}"&gt;{$bar.zag}&lt;/a&gt;
	  &lt;a href="{$bar.zig2}"&gt;{$bar.zag2}&lt;/a&gt;
	  &lt;a href="{$bar.zig3}"&gt;{$bar.zag3}&lt;/a&gt;
	{foreachelse}
	  There were no rows found
{/foreach}
Copy<br>Div:<br>[$foo]
  &lt;a href="{$zig}"&gt;{$zag}&lt;/a&gt;
  &lt;a href="{$zig2}"&gt;{$zag2}&lt;/a&gt;
  &lt;a href="{$zig3}"&gt;{$zag3}&lt;/a&gt;
@empty@
  There were no rows found
[/$foo]
Copy<br><br>Smarty:<br>{include file="header.tpl"}
Copy<br>Div:<br>(% header %}
Copy<br><br>Smarty:<br>{for $x = 1 to 20 step 2}
	  {$x}
{/for}
Copy<br>Div:<br>[:1,20,x,2:]
	  {$x} 
[/]
Copy]]></description><link>documentation\div-php-template-engine\appendixes\appendix-b-comparison-of-syntax-of-smarty-and-div.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Appendixes/Appendix B - Comparison of syntax of Smarty and Div.md</guid><pubDate>Sun, 28 Jan 2024 15:54:39 GMT</pubDate></item><item><title><![CDATA[Aggregate functions]]></title><description><![CDATA[ 
 <br>The aggregate functions similar to SQL. With this feature you can get some results from list's operations, like as "sum", "average", etc. Think of "aggregate functions" as "list's modifiers", similarly to&nbsp;"variable's modifiers".<br>Syntax in templates<br>
{$function:variable-property}
Copy<br><br>Example<br>index.php<br>&lt;?php
	
echo new div('index.tpl', [
		'blocks' =&gt; [
			['title' =&gt; 'Who is online', 'weight' =&gt; 0, "show" =&gt; true],
			['title' =&gt; 'Last comments', 'weight' =&gt; 1, "show" =&gt; false],
			['title' =&gt; 'Forum topics', 'weight' =&gt; 2, "show" =&gt; true]
		],
		'widths' =&gt; [800, 700, 600, 500]
]);

Copy<br>index.tpl<br>&lt;!--{ array of array/object }--&gt;
	
Minimum weight: {$min:blocks-weight}
Maximum weight: {$max:blocks-weight}
Weight average: {$avg:blocks-weight}
Weight sum: {$sum:blocks-weight}
Showed blocks: {$blocks-weight} or {$count:blocks-weight}
	
&lt;!--{ array of atomic values }--&gt;
	
Minimum weight: {$min:widths}
Maximum weight: {$max:widths}
Weight average: {$avg:widths}
Weight sum: {$sum:widths}
Showed blocks: {$widths}

	
Copy<br>Output<br>Minimum weight: 0
Maximum weight: 2
Weight average: 1
Weight sum: 3
Showed blocks: 2 or 2
	
Minimum weight: 500
Maximum weight: 800
Weight average: 650
Weight sum: 2600
Showed blocks: 4

Copy]]></description><link>documentation\div-php-template-engine\features\aggregate-functions.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Aggregate functions.md</guid><pubDate>Sun, 28 Jan 2024 14:39:04 GMT</pubDate></item><item><title><![CDATA[Capsules]]></title><description><![CDATA[ 
 <br>An capsule is a part of template for reduce their code, make the template more readable, among other advantages.<br>Syntax in templates<br>
[[varname
	... In this section you can use the properties of variable if it is
	an object or their keys if it is an array ...
varname]]

Copy<br>Example<br>index.php<br>&lt;?php
	
echo new div('index.tpl', array(
	'product' =&gt; [
		'name' =&gt; 'Banana',
		'price' =&gt; 20.5,
		'tax' =&gt; 1.5
	]
]);

Copy<br>index.tpl<br>Product:
	
[[product
		Name: {$name}
		Price: {$price}
		Tax: {$tax}
product]]
	
Similar:
	
		Name: {$product.name}
		Price: {$product.price}
		Tax: {$product.tax}
Copy<br>Output<br>Product:
	
		Name: Banana
		Price: 20.5
		Tax: 1.5
	
Similar:
	
		Name: Banana
		Price: 20.5
		Tax: 1.5

Copy]]></description><link>documentation\div-php-template-engine\features\capsules.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Capsules.md</guid><pubDate>Sun, 28 Jan 2024 14:35:44 GMT</pubDate></item><item><title><![CDATA[Comments]]></title><description><![CDATA[ 
 <br>Syntax<br>&lt;!--{ inline comment here }--&gt;
	
&lt;!--{ 
	
	Multi-line comment here 
	This multiline comment is not sent to browser.
	
}--&gt;
Copy<br>Example<br>&lt;h1&gt;Hello world&lt;/h1&gt;

&lt;!--{ This is a comment }--&gt;
&lt;span&gt;Powered by Div&lt;/span&gt;
Copy<br>Output<br>
&lt;h1&gt;Hello world&lt;/h1&gt;
&lt;span&gt;Powered by Div&lt;/span&gt;
Copy]]></description><link>documentation\div-php-template-engine\features\comments.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Comments.md</guid><pubDate>Sun, 28 Jan 2024 14:35:25 GMT</pubDate></item><item><title><![CDATA[Conditional parts]]></title><description><![CDATA[ 
 <br>One of the most commonly used functions in the GUI is to show or hide part of the interface. This is achieved with Div in various ways, and one of them is the use of the conditional parts.<br>Some conditional on the template is defined by a block that begins and ends with the character question tag (?) or exclamation (!) otherwise, accompanied by a variable that must be a boolean value. For example, you can do this in the template:<br>?$showproducts
	... some template here ...
$showproducts?
Copy<br>If the value of "showproducts" is true, it shows the code between both tags. If the value is false or if you not pass the variable "showproducts", that part of code will be hidden.<br>In general, the boolean value is defined by the method&nbsp;div::mixedBool, which takes into account the following criteria:<br>
<br>False if the value is false
<br>False if the value is null
<br>False if the value is not greater than zero
<br>False if is "0"
<br>False if is an empty string
<br>False if is an object without properties
<br>The same value in any other case
<br>Syntax:<br>
For test the var as TRUE:
	
?$var
	... some code here ...
@else@
	... some another code here
$var?
	
For test the var as FALSE:
	
!$var
	... some code here ...
@else@
   ... some another code here
$var!

Copy<br>Example:<br>index.php<br>
echo new div('index.tpl', [
		'products' =&gt; [
			['name' =&gt; 'Banana', 'price' =&gt; 20.5],
			['name' =&gt; 'Potato', 'price' =&gt; 10.8]
		]
]);
Copy<br>index.tpl<br>
Products:
	
?$products
	[$products]
		{$name} - {$price}
	[/$products]
@else@
	No products
$products?
	
Similar result:

!$products
	No products
@else@
	[$products]
		{$name} - {$price}
	[/$products]
$products!

Copy<br>Output<br>Products:
	
Banana - 20.5
Potato - 10.8
	
Similar result:
	
Banana - 20.5
Potato - 10.8
Copy]]></description><link>documentation\div-php-template-engine\features\conditional-parts.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Conditional parts.md</guid><pubDate>Sun, 28 Jan 2024 14:37:31 GMT</pubDate></item><item><title><![CDATA[Conditions]]></title><description><![CDATA[ 
 <br>The&nbsp;conditions&nbsp;is more complicated than&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/features/conditions#conditional-parts" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/features/conditions#conditional-parts" target="_blank">conditional parts</a>. With conditions, you can show conditional parts based on a boolean expression and not only from a boolean value. See the&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/features/conditions#allowed-php-functions" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/features/conditions#allowed-php-functions" target="_blank">allowed PHP functions</a>. The expression can be an expression of PHP, blended with code of Div.<br>Syntax:&nbsp;<br>{?( ... expression ... )?}
	
	... some code here ...
	
@else@
	
	... some another code here ...
	
{/?}
Copy<br>Example<br>index.php<br>
echo new div('index.tpl', [
		'products' =&gt; [
			['name' =&gt; 'Banana', 'price' =&gt; 20.5],
			['name' =&gt; 'Potato', 'price' =&gt; 10.8]
		]
]);
Copy<br>index.tpl<br>
{?( {$products} &gt; 0 )?}
		There are {$products} products in the warehouse
@else@
		There are not products in the warehouse
{/?}
Copy<br>Output<br>
There are 2 products in the warehouse

Copy<br>You must understand that the expression in parentheses will be interpreted by the template engine as well. That means the end result of that interpretation must be a valid PHP boolean expression. An example to understand this is when comparing to strings.<br>{?( "{$userRole}" === "guest" )?}
&nbsp; &nbsp; &nbsp; &nbsp; {% loginPage %}
@else@
&nbsp; &nbsp; &nbsp; &nbsp; {% dashboard %}
{/?}
Copy<br>Notice carefully how the $userRole variable substitution is enclosed in quotes.<br>"{$userRole}" === "guest"
Copy<br>This means that when it is substituted for its value, the value will be enclosed in quotes, because you have told the template engine so.<br>"guest" === "guest"
Copy<br>The following would be an error, because the content of the variable would not be enclosed in quotes and would not result in a valid expression for PHP.<br>{$userRole} === "guest"
Copy<br>Output:<br>guest === "guest"
Copy]]></description><link>documentation\div-php-template-engine\features\conditions.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Conditions.md</guid><pubDate>Sun, 28 Jan 2024 14:37:57 GMT</pubDate></item><item><title><![CDATA[Content like an object (intelligent data)]]></title><description><![CDATA[ 
 <br>The information or content that it is passed to the constructor of the div class, can be an object and/or it can contain objects and you can access to the methods of these objects. The access to those methods to obtain information depends on the context or scope in which is you working.<br>Example: "template scope"<br>index.php<br>&lt;?php
	
include 'div.php';
	
class MyData{
		
	var $values;
	
	function __construct($values){
		$this-&gt;values = $values;
	}
		
	public function implode(){
		return implode(",",$this-&gt;values);
	}
		
}
	
echo new div('index.tpl', new MyData(["A","B","C","D"]));
Copy<br>index.tpl<br>
{= data: -&gt;implode() =}

{$data} 

Copy<br>Output<br>
A,B,C,D

Copy<br>Example: "capsule scope"<br>index.php<br>&lt;?php
	
include 'div.php';
	
// create a class ...
	
class MyString{
		
	var $value;
		
	function __construct($value){
		$this-&gt;value = $value;
	}
		
	public function upper(){
		return strtoupper($this-&gt;value);
	}
		
}
	
// using the class
	
echo new div('index.tpl', array('name' =&gt; new MyString('peter')));

Copy<br>index.tpl<br>
[[name
	  {$value}
	  
	  {= up: -&gt;upper() =}
	  
	  {$up}
name]]
Copy<br>Output<br>
peter
PETER

Copy<br><br>index.tpl<br>
{= up: -&gt;name.upper() =}
{$up}

Copy<br>Output<br>
PETER
Copy<br><br>index.php<br>class Person{
		
	var $first_name;
	var $last_name;
	
	function __construct($first_name, $last_name){
		$this-&gt;first_name = $first_name;
		$this-&gt;last_name = $last_name;
	}
	
	public function getName(){
		return $this-&gt;first_name.' '.$this-&gt;last_name;
	}
	
}

echo new div('index.tpl', [
	'people' =&gt; [
		new Person('John', 'Nash'),
		new Person('Albert', 'Einstein'),
		new Person('Jacque', 'Fresco')
	]
]);
Copy<br>index.tpl<br>
[$people]
	{= complete_name: -&gt;getName() =}
	
	First name: {$first_name}
	Last name: {$last_name}
	Complete name: {$complete_name}
	
[/$people]

Copy<br>Output<br>
First name: John
Last name: Nash
Complete name: John Nash
	
First name: Albert
Last name: Einstein
Complete name: Albert Einstein
	
First name: Jacque
Last name: Fresco
Complete name: Jacque Fresco

Copy<br><a data-href="Hooks" href="\documentation\div-php-template-engine\features\hooks.html" class="internal-link" target="_self" rel="noopener">Hooks</a>]]></description><link>documentation\div-php-template-engine\features\content-like-an-object-(intelligent-data).html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Content like an object (intelligent data).md</guid><pubDate>Sun, 28 Jan 2024 15:45:22 GMT</pubDate></item><item><title><![CDATA[Custom modifiers]]></title><description><![CDATA[ 
 <br>The programmers can create new modifiers of variables. For this the programmers should use the static method "addCustomModifier." The modifier can be a function or a static method of class. The modifier function should have a single parameter.<br>Example:<br>index.php<br>&lt;?php
	
include 'div.php';
	
class MyModifiers {
		
	/* The modifier function should have a single parameter. */
	static function upper($value){
		return strtoupper($value);
	}
		
}
	
function lower($value){
	return strtolower($value);
}
	
div::addCustomModifier('upper:', 'MyModifiers::upper');
div::addCustomModifier('lower:', 'lower');
	
echo new div('index.tpl', array('text' =&gt; 'Hello World'));
Copy<br>index.tpl<br>{upper:text}
	
{lower:text}
Copy<br>Output:<br>HELLO WORLD

hello world
Copy]]></description><link>documentation\div-php-template-engine\features\custom-modifiers.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Custom modifiers.md</guid><pubDate>Sun, 28 Jan 2024 14:31:30 GMT</pubDate></item><item><title><![CDATA[Data formats]]></title><description><![CDATA[ 
 <br>The data formats are <a data-href="Variable's modifiers" href="\documentation\div-php-template-engine\features\variable's-modifiers.html" class="internal-link" target="_self" rel="noopener">Variable's modifiers</a> that need more information than a symbol.<br>Date format {Format a timestamp}<br>Syntax in templates<br>{/variable:php-format-date/}
Copy<br>Example<br>index.php<br>echo new div('index.tpl', ['today' =&gt; time()]);
Copy<br>index.tpl<br>Timestamp: {$today}
Today is: {/today:Y-m-d/}
Now is: {/today:h:i:s/}
Copy<br>Output<br>Timestamp: 1341956900
Today is: 2012-07-10
Now is: 05:48:20
Copy<br>Number format<br>Syntax in templates<br>{#variable:decimals separator miles-separator#}
Copy<br>Example<br>index.php<br>echo new div('index.tpl', ['number' =&gt; 2900200.4567]);
Copy<br>index.tpl<br>The number: {$number}
The integer part: {#number:0#}
Two decimals: {#number:2#}
Two decimals and separators: {#number:2,.#}
Two decimals and other separators: {#number:2.'#}
More decimals and other separators: {#number:9|-#}
Copy<br>Output<br>The number: 2900200.4567
The integer part: 2900200
Two decimals: 2900200.46
Two decimals and separators: 2.900.200,46
Two decimals and other separators: 2'900'200.46
More decimals and other separators: 2-900-200|456700000
Copy]]></description><link>documentation\div-php-template-engine\features\data-formats.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Data formats.md</guid><pubDate>Sun, 28 Jan 2024 14:32:53 GMT</pubDate></item><item><title><![CDATA[Default replacement for a variable]]></title><description><![CDATA[ 
 <br>How to define a default replacement for a specific variable? It is really simple:<br>Syntax in PHP<br>&lt;?php
	
div::selDefaultByVar($varname, $value_to_search, $replace_with, $update);

Copy<br>Syntax in templates<br>
{@ ['varname', value_to_search, replace_with ] @}

Copy]]></description><link>documentation\div-php-template-engine\features\default-replacement-for-a-variable.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Default replacement for a variable.md</guid><pubDate>Sun, 28 Jan 2024 15:39:37 GMT</pubDate></item><item><title><![CDATA[Default replacements]]></title><description><![CDATA[ 
 <br>Replace some values for another values.<br>Syntax in PHP<br>&lt;?php
	
div::setDefault($value_to_search, $replace_with);

	
Copy<br>Syntax in templates<br>
{@ [value_to_search, replace_with] @}

Copy<br>Example<br>index.php<br>&lt;?php
	
div::setDefault(true, "YES");
	
echo new div("index.tpl", [
		"haveproducts" =&gt; true,
		"havemoney" =&gt; false
]);

Copy<br>index.tpl<br>{@ [false, "NO"] @}
	 
Have products: {$haveproducts}
Have money: {$havemoney}

	
Copy<br>Output<br>
Have products: YES
Have money: NO

Copy<br><a data-href="Default replacement for a variable" href="\documentation\div-php-template-engine\features\default-replacement-for-a-variable.html" class="internal-link" target="_self" rel="noopener">Default replacement for a variable</a>]]></description><link>documentation\div-php-template-engine\features\default-replacements.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Default replacements.md</guid><pubDate>Sun, 28 Jan 2024 16:05:09 GMT</pubDate></item><item><title><![CDATA[Dialect translator]]></title><description><![CDATA[ 
 <br>Div provide a translator for dialects. This translator can translate from any dialect to current dialect. Div use the current template's variables for self help in the translation. For this reason, you only translate having a instance of div.<br>Example<br>index.php<br>&lt;?php
	
include 'div.php';
	
$tpl = new div('index.tpl');
	
$tpl-&gt;translateFrom([
	'DIV_TAG_IGNORE_BEGIN' =&gt; '{literal}',
	'DIV_TAG_IGNORE_END' =&gt; '{/literal}'
]);
	
$tpl-&gt;show();
Copy<br>index.tpl<br>
{= name: "Peter" =}
	
{literal}
	{$name}
{/literal}
	
{$name}

Copy<br>index.tpl (translated)<br>	
{= name: "Peter" =}
	
{ignore}
	{$name}
{/ignore}
	
{$name}
Copy]]></description><link>documentation\div-php-template-engine\features\dialect-translator.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Dialect translator.md</guid><pubDate>Sun, 28 Jan 2024 14:42:37 GMT</pubDate></item><item><title><![CDATA[Dialects]]></title><description><![CDATA[ 
 <br>You can change the proposed Div tags for templates. By doing this, you are creating a "dialect" for the template language. The dialects can be very useful when you want to zoom in Div language to a known template language or easier to understand by its developers. It can also be useful when you want to process template contains tags similar to Div.<br>The dialect in Div is defined by a set of constants that begin with the prefix DIV_TAG. A dialect have required tags and rules that are verified. You can use the tool&nbsp;<a data-tooltip-position="top" aria-label="http://safe.phpclasses.net/browse/view/html/file/58096/user/rafa3/auth/1476112747-156f9c/name/dialect.html" rel="noopener" class="external-link" href="http://safe.phpclasses.net/browse/view/html/file/58096/user/rafa3/auth/1476112747-156f9c/name/dialect.html" target="_blank">Div Dialect Creator</a>&nbsp;to create dialects.<br>To create a new dialect you should define the constants before including the file&nbsp;div.php. You are not forced to define all the constants, so alone those that you need to change. The following table show the set of constants that define a dialect in Div.<br><br><a data-href="Multiple dialects" href="\documentation\div-php-template-engine\features\multiple-dialects.html" class="internal-link" target="_self" rel="noopener">Multiple dialects</a><br>
<a data-href="Dialect translator" href="\documentation\div-php-template-engine\features\dialect-translator.html" class="internal-link" target="_self" rel="noopener">Dialect translator</a><br>
<a data-href="Understanding the syntax" href="\documentation\div-php-template-engine\features\understanding-the-syntax.html" class="internal-link" target="_self" rel="noopener">Understanding the syntax</a>]]></description><link>documentation\div-php-template-engine\features\dialects.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Dialects.md</guid><pubDate>Sun, 28 Jan 2024 14:43:59 GMT</pubDate></item><item><title><![CDATA[Dynamic vars inside a loop]]></title><description><![CDATA[ 
 <br>]]></description><link>documentation\div-php-template-engine\features\dynamic-vars-inside-a-loop.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Dynamic vars inside a loop.md</guid><pubDate>Sun, 28 Jan 2024 14:36:42 GMT</pubDate></item><item><title><![CDATA[Formulas]]></title><description><![CDATA[ 
 <br>To make calculations and other advantages. The formula is a valid PHP expression. See the&nbsp;<a data-href="Appendix A - Allowed PHP functions" href="\documentation\div-php-template-engine\appendixes\appendix-a-allowed-php-functions.html" class="internal-link" target="_self" rel="noopener">Appendix A - Allowed PHP functions</a><br>Syntax in templates  <br>&nbsp;&nbsp; &nbsp;<br>(# formula #)
    
OR
    
(# formula : number format #)
Copy<br>&nbsp; &nbsp;<br>
The number format are explained in Data formats.<br>Example<br>index.tpl  <br>&nbsp;&nbsp; &nbsp;<br>{= number: 200.000 =}
{=  price:  20.000 =}
{=    tax:   0.345 =}
    
5 + {$number} = (# 5 + {$number} #)
    
Price with tax: ${$price} + ${#tax:2.#} = $(# {$price} + {$tax} :2. #)
Copy<br>&nbsp; &nbsp;&nbsp;<br>
Output<br>5 + 200 = 205
    
Price with tax: $20 + $0.35 = $20.35
Copy]]></description><link>documentation\div-php-template-engine\features\formulas.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Formulas.md</guid><pubDate>Sun, 28 Jan 2024 14:34:40 GMT</pubDate></item><item><title><![CDATA[Friendly tags]]></title><description><![CDATA[ 
 <br>IDE sometimes detects the code of Div in HTML templates like a syntax error, because they don't have a plugin that identify the syntax of Div. Then, to avoid that it is shown as an error, Div provides two tags to encapsulate its code making it a comment.<br>Syntax in templates<br>
&lt;!--| ... some Div code here ... |--&gt;

Copy<br>Example<br>index.tpl<br>
This:
	
&lt;!--| [$products] |--&gt;
	Name: {$name}
	Price: {$price}
&lt;!--| [/$products] |--&gt;
	
Is equal to:
	
[$products]
	Name: {$name}
	Price: {$price}
[/$products]

Copy]]></description><link>documentation\div-php-template-engine\features\friendly-tags.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Friendly tags.md</guid><pubDate>Sun, 28 Jan 2024 14:51:50 GMT</pubDate></item><item><title><![CDATA[Global vars]]></title><description><![CDATA[ 
 <br>The global variables conserve their value and they are independent of the instances of the div class.<br>Syntax in PHP<br>&lt;?php
	
div::setGlobal('var-name', $mixed_value);

Copy<br>Example<br>index.php<br>&lt;?php
	
div::setGlobal('today', date('Y-m-d'));
	
echo new div('index.tpl', [
	'name' =&gt; 'Peter'
]);
	
echo new div('index.tpl', [
		'name' =&gt; 'Jack'
]);

Copy<br>index.tpl<br>
Hello {$name}
Today is: {$today}

Copy<br>Output<br>
Hello Peter
Today is 2012-08-17
	
Hello Jack
Today is 2012-08-17

Copy]]></description><link>documentation\div-php-template-engine\features\global-vars.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Global vars.md</guid><pubDate>Sun, 28 Jan 2024 14:38:33 GMT</pubDate></item><item><title><![CDATA[Hooks]]></title><description><![CDATA[ 
 <br>The hooks are methods that can be implemented by the programmer in a class that inherit from div. This methods will be executed by div in some events. For example, before or after parse of template.<br>At the moment, the hooks are&nbsp;beforeBuild,&nbsp;afterBuild,&nbsp;beforeParse&nbsp;and&nbsp;afterParse. In the&nbsp;beforeBuild&nbsp;hook, you can modify the&nbsp;$src&nbsp;and&nbsp;$items&nbsp;optional parameters of the div constructor.<br>Example:<br>index.php<br>	
class Page extends div{
	
	public function beforeBuild(&amp;$src = null, &amp;$items = null){
		$this-&gt;title = 'Hello World';
		$items['body'] = 'This is the hook!'; 
	}
	
}

echo new Page('index.tpl');

Copy<br>index.tpl<br>
&lt;h1&gt;{$title}&lt;/h1&gt;
&lt;p&gt;{$body}&lt;/p&gt;

Copy<br>Output<br>
&lt;h1&gt;Hello World&lt;/h1&gt;
&lt;p&gt;This is the hook!&lt;/p&gt;

Copy]]></description><link>documentation\div-php-template-engine\features\hooks.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Hooks.md</guid><pubDate>Sun, 28 Jan 2024 15:45:10 GMT</pubDate></item><item><title><![CDATA[HTML to plain text]]></title><description><![CDATA[ 
 <br>Syntax:<br>{txt}
	... some html code here ...
{/txt}
	
{txt} width =&gt;
	... some html code here ...
{/txt}
Copy<br>Example<br>{txt} 
	
&lt;h1&gt;Document title&lt;/h1&gt;
	
{/txt}
Copy<br>Output:<br>Document title
Copy]]></description><link>documentation\div-php-template-engine\features\html-to-plain-text.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/HTML to plain text.md</guid><pubDate>Sun, 28 Jan 2024 14:36:06 GMT</pubDate></item><item><title><![CDATA[Ignored parts (escaping Div parsing)]]></title><description><![CDATA[ 
 <br>The way of define a part of the template and ignore their code.<br>Syntax in templates<br>{ignore}
&nbsp;&nbsp; &nbsp;
... some ignored code here ...
&nbsp;&nbsp; &nbsp;
{/ignore}
Copy<br>Example<br>index.php<br>echo new div('index.tpl', ['name' =&gt; "Peter"]);
Copy<br>index.tpl<br>{ignore}

Name: {$name}

{/ignore}
Copy<br>Output<br>Name: {$name}
Copy]]></description><link>documentation\div-php-template-engine\features\ignored-parts-(escaping-div-parsing).html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Ignored parts (escaping Div parsing).md</guid><pubDate>Sun, 28 Jan 2024 14:35:10 GMT</pubDate></item><item><title><![CDATA[Including another templates]]></title><description><![CDATA[ 
 <br>A complex design, require split of the template. Then you can include the design's parts in a container template.<br>Syntax in templates<br>
{% var with path to the template's part %}
	
OR
	
{% path/to/the/template/part %}

Copy<br>Example<br>part.tpl<br>Hello world!
Copy<br>index.tpl<br>
This is the container template:
	
{% part %}

Copy<br>Output<br>
This is the container template:
	
Hello world!

Copy<br>Important:<br>The engine does not accept that a template is included itself.]]></description><link>documentation\div-php-template-engine\features\including-another-templates.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Including another templates.md</guid><pubDate>Sun, 28 Jan 2024 14:45:26 GMT</pubDate></item><item><title><![CDATA[Including pre-processed templates]]></title><description><![CDATA[ 
 <br>Similar to&nbsp;<a data-href="Including another templates" href="\documentation\div-php-template-engine\features\including-another-templates.html" class="internal-link" target="_self" rel="noopener">Including another templates</a>, but in this case, first the engine parse the template, and then include it.<br>Syntax in templates<br>
{%% var with path to the template's part %%}
	
OR
	
{%% path/to/the/template/part %%}

Copy<br>Example<br>index.php<br>&lt;?php
	
echo new div('test.tpl', [
	'name' =&gt; 'Unnamed',
	'products' =&gt; [
		['name' =&gt; 'Banana'],
		['name' =&gt; 'Potato']
	]
]);

Copy<br>index.tpl<br>	
Include:
	
[$products]
	{% part %}
[/$products]
	
Preprocessed:
	
[$products]
	{%% part %%}
[/$products]

Copy<br>part.tpl<br>
{$name}

Copy<br>Output<br>
Banana
	
Potato
	
Unnamed
	
Unnamed
Copy]]></description><link>documentation\div-php-template-engine\features\including-pre-processed-templates.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Including pre-processed templates.md</guid><pubDate>Sun, 28 Jan 2024 15:40:22 GMT</pubDate></item><item><title><![CDATA[Iterations]]></title><description><![CDATA[ 
 <br>This feature is for perform a N iterations of a loop. The iterations are loops that increment a variable in each cycle. The value of this variable can be accessed by&nbsp;$value. You can also specify the name of the variable and the steps of the increments.<br>Syntax:<br>[:from,to,var,step:]
	... some code here ...
[/]
Copy<br>Example:<br>index.tpl<br>
[:1,10:] {$value} [/]
[:1,10,x:] {$x} [/]
[:1,10,x,2:] {$x} [/]
Copy<br>Output:<br> 1  2  3  4  5  6  7  8  9  10 
 1  2  3  4  5  6  7  8  9  10 
 1  3  5  7  9 
Copy]]></description><link>documentation\div-php-template-engine\features\iterations.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Iterations.md</guid><pubDate>Sun, 28 Jan 2024 14:37:07 GMT</pubDate></item><item><title><![CDATA[Lists (loops)]]></title><description><![CDATA[ 
 <br>With a list you can repeat some part of template code and work with each item of the list.<br>Syntax:<br>
[$listvar]
	   ... some code here ... 
@empty@
   ... some code when the list is empty ...
[/$listvar]
Copy<br>Example:<br>
echo new div('index.tpl', array(
	'employees' =&gt; [
		'Rafa',
		'Peter',
		'John'	
	],
	'products' =&gt; []
]);
Copy<br>index.tpl<br>Employees:
	
[$employees]
	{$value}
[/$employees]
	
Products:
	
[$products]
	{$name}
@empty@
    Empty list of products!
[/$employees]
Copy<br>Output:<br>Employees:
	
Rafa
Peter
John
	
Products:
	
Empty list of products!
Copy<br><a data-href="Dynamic vars inside a loop" href="\documentation\div-php-template-engine\features\dynamic-vars-inside-a-loop.html" class="internal-link" target="_self" rel="noopener">Dynamic vars inside a loop</a>]]></description><link>documentation\div-php-template-engine\features\lists-(loops).html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Lists (loops).md</guid><pubDate>Sun, 28 Jan 2024 14:36:52 GMT</pubDate></item><item><title><![CDATA[Locations]]></title><description><![CDATA[ 
 <br>The locations are tags that identify some positions into template. With this feature you can define a location in any part of the template, and then collocate any content in this location. The tag that represent the location can be repeated in other positions. Also, you can locate several template pieces in the same location.<br>Now you can separate two concepts: the content from their location in the template. This advantage can be resolved with&nbsp;<a data-href="Simple replacements" href="\documentation\div-php-template-engine\features\simple-replacements.html" class="internal-link" target="_self" rel="noopener">Simple replacements</a> of &nbsp;<a data-href="Template's variables" href="\documentation\div-php-template-engine\features\template's-variables.html" class="internal-link" target="_self" rel="noopener">Template's variables</a> but this is not sufficient and it is not equal.<br>Syntax<br>Define the location:
	
(( location_name ))
	
Define the content:
	
{{location_name
	
... some content here ...
	
location_name}}
Copy<br>Example<br>layout.tpl<br>&lt;html&gt;
	&lt;body&gt;
		&lt;div id="header"&gt;(( header ))&lt;/div&gt;
		&lt;div id="content"&gt;(( content ))&lt;/div&gt;
		&lt;div id="footer"&gt;(( footer ))&lt;/div&gt;
	&lt;/body&gt; 
&lt;/html&gt;
Copy<br>index.tpl<br>{% layout %}
	
{{header
	This is the header
header}}
	
{{footer
	This is the footer
footer}}
	
{{content
	This is the content
content}}
	
{{header
	&lt;br/&gt;.... more in the header .....
header}}

Copy<br>Output<br>&lt;html&gt;
	&lt;body&gt;
		&lt;div id="header"&gt;This is the header&lt;br/&gt;.... more in the header .....&lt;/div&gt;
		&lt;div id="content"&gt;This is the content&lt;/div&gt;
		&lt;div id="footer"&gt;This is the footer&lt;/div&gt;
	&lt;/body&gt; 
&lt;/html&gt;
Copy]]></description><link>documentation\div-php-template-engine\features\locations.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Locations.md</guid><pubDate>Sun, 28 Jan 2024 15:50:35 GMT</pubDate></item><item><title><![CDATA[Macros]]></title><description><![CDATA[ 
 <br>A macro is a restricted PHP code dedicated to execute the design's complex tasks. For this reason, Div assures that the PHP code will be not intrusive or insecure.<br>Syntax<br>&lt;?

// ... some PHP code here ...
	
?&gt;
Copy<br>Example<br>index.php<br>&lt;?php
	
include 'div.php';
	
class page extends div{
		
	public function upper($str){
		return strtoupper($str);
	}
}
	
echo new page('index.tpl', [
	'products' =&gt; ['Banana', 'Potato']
]);
Copy<br>index.tpl<br>
{= text: "hello" =}
	
{$text}
	
&lt;? 
		// upper() is a method of current class
		$text = upper($text); 
?&gt;
	
{$text}
	
Products:
	
&lt;? 
	
	$i = 0; 
	
	foreach($products as $product) {
		$i++;
		echo "$i - $product\n";
	}
	
?&gt;
	
They are {$i} products 
	
Copy<br>Output<br>hello
	
HELLO
	
Products:
	
1 - Banana
2 - Potato
	
They are 2 products
Copy<br><br>
<br>It is not allowed to use&nbsp;$this&nbsp;or&nbsp;self
<br>It is only allowed to use&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/features/macros#allowed-php-functions" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/features/macros#allowed-php-functions" target="_blank">some functions of PHP</a>&nbsp;by default. You can enable the use of another function through the method&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/features/macros#div-methods" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/features/macros#div-methods" target="_blank">setAllowedFunction</a>.
<br>It is not allowed to create functions neither classes.
<br>It is not allowed to include other script.
<br><br>
<br>Create new template's variables
<br>Change the value of any template's variable
<br>ECHO any content (take care of not provoking an infinite loop)
<br>Use the allowed methods of div as a functions:

<br>asThis
<br>atLeastOneString
<br>getCountOfParagraphs
<br>getCountOfSentences
<br>getCountOfWords
<br>getLastKeyOfArray
<br>getRanges
<br>htmlToText
<br>isArrayOfArray
<br>isArrayOfObjects
<br>isCli
<br>isNumericList
<br>isString
<br>jsonDecode
<br>jsonEncode
<br>mixedBool


<br>Use the methods of current class without restrictions if it is a&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/features/macros#oop" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/features/macros#oop" target="_blank">class that extends div</a>
]]></description><link>documentation\div-php-template-engine\features\macros.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Macros.md</guid><pubDate>Sun, 28 Jan 2024 15:43:10 GMT</pubDate></item><item><title><![CDATA[Multi replacements]]></title><description><![CDATA[ 
 <br>Replace X with Y.<br>Syntax in templates<br>
{:varname}
		... some code here ...	
{:/varname}

Copy<br>The variable should be an array where each item of array is an array with 3 element:&nbsp;string to search,&nbsp;string to replace&nbsp;and&nbsp;use or not regular expressions.<br>Example<br>index.php<br>&lt;?php
	
echo new div('index.tpl', [

		/* str_replace */
		'customtags' =&gt; [
			['[b]', '&lt;b&gt;'],
			['[/b]', '&lt;/b&gt;']
		],

		/* preg_replace */
		'highlight' =&gt; [
			['/\*.*\*/', '&lt;span class = "comment"&gt;$0&lt;/span&gt;', true]
		]
]);
Copy<br>index.tpl<br>{= htmlfix: [
	['&lt;b&gt;','&lt;strong&gt;']
	['&lt;/b&gt;','&lt;/strong&gt;']
] =}
	
{:customtags}
{:htmlfix}
	
[b]Hello World[/b]
	
{:/htmlfix}
{:/customtags}
	
{:highlight}
	
/* this is a PHP comment */
	
{:/highlight}

Copy<br>Output<br>
&lt;strong&gt;Hello World&lt;/strong&gt;
	
&lt;span class = "comment"&gt;/* this is a PHP comment */&lt;/span&gt;

Copy]]></description><link>documentation\div-php-template-engine\features\multi-replacements.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Multi replacements.md</guid><pubDate>Sun, 28 Jan 2024 16:02:35 GMT</pubDate></item><item><title><![CDATA[Multiple dialects]]></title><description><![CDATA[ 
 <br>With the&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/features/custom-dialects/multiple-dialects#template-property" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/features/custom-dialects/multiple-dialects#template-property" target="_blank">template's property</a>&nbsp;@__DIALECT you can specify the dialect for current template source. This dialect should be written in a separeted file with JSON code. For example:<br>Example<br>index.tpl<br>@_DIALECT = smarty.dialect
{* this is a comment *}
Name: {$name}
{literal}
{$name}
{/literal}
{% other %}
Copy<br>other.tpl<br>@_DIALECT = twig.dialect
{{ foo.bar }}
Copy<br>smarty.dialect<br>{
  'DIV_TAG_IGNORE_BEGIN': '{literal}',
  'DIV_TAG_IGNORE_END': '{/literal}',
  'DIV_TAG_COMMENT_BEGIN': '{*',
  'DIV_TAG_COMMENT_END': '*}'
}
Copy<br>twig.dialect<br>{
  'DIV_TAG_REPLACEMENT_SUFFIX': ' }}',
  'DIV_TAG_MODIFIER_SIMPLE': '{ '
}
Copy<br>index.php<br>&lt;?php
	
include "div.php";
	
echo  new div("index.tpl", [
	'name' =&gt; 'Peter',
	'foo' =&gt; [
		'bar' =&gt; 45
	]
]);
Copy<br>Output<br>Name: Peter
	
{$name}
	
45
Copy]]></description><link>documentation\div-php-template-engine\features\multiple-dialects.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Multiple dialects.md</guid><pubDate>Sun, 28 Jan 2024 14:42:17 GMT</pubDate></item><item><title><![CDATA[Multiple variable's modifiers]]></title><description><![CDATA[ 
 <br>Syntax:<br>{$varname|modifier1|modifier2|modifier3|...|}
Copy<br>Example:<br>index.tpl<br>{= word: "ABCDEFG" =}
		
{$word|0,3|}
{$word|0,3|_|}
{$word|0,3|_|^|}
{$word|0,3|_|^|~2|}
Copy<br>Output:<br>ABC
abc
Abc
Ab
Copy]]></description><link>documentation\div-php-template-engine\features\multiple-variable's-modifiers.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Multiple variable's modifiers.md</guid><pubDate>Sun, 28 Jan 2024 14:31:57 GMT</pubDate></item><item><title><![CDATA[Object Oriented Programming]]></title><description><![CDATA[ 
 <br>In this section you can learn how the programmer can create classes that inherits from the&nbsp;div&nbsp;class.<br>The constructor should respect the parent's constructor. Change the default constructor is not recommended. IMPORTANT: The recommended way for do something before build is the implementation of&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/docs/div-php-template-engine/features/object-oriented-programming#hooks" rel="noopener" class="external-link" href="https://divengine.org/docs/div-php-template-engine/features/object-oriented-programming#hooks" target="_blank"><strong></strong>&nbsp;hook</a>beforeBuild().<br>&lt;?php
	
include 'div.php';

use divengine\div;
	
class MyPage extends div{
		
	/* IMPORTANT: Change the default constructor is not recommended */
	public function __construct($src = null, $items = [], $ignored = []){
			
		/*.. some code here */
			
		parent::__construct($src, $items, $ignored);
	}
		
	/* IMPORTANT: The recommended way for do something before              */ 
	/* construct the object is the implementation of beforeBuild() hook.   */	
	
	public function beforeBuild(&amp;$src = null, &amp;$items = null, &amp;$ignore =[]){
			
		// something to do before build the object
			
	}
		
	/* ... custom methods here... */
		
}

Copy<br>Example:<br>index.php<br>&lt;?php
	
class MyPage extends div{
		
	public function getProducts(){
		return [
			[
				'name' =&gt; 'Banana',
				'price' =&gt; 20	
			],
			[
				'name' =&gt; 'Potato',
				'price' =&gt; 30
			]
		];
	}
		
	public function sum($x, $y){
		return $x + $y;
	}
		
}
Copy<br>index.tpl<br>
{= products: -&gt;getProducts() =}
{= result: -&gt;sum(20,30) =}
	
[$products] 
		{$name} 
[/$products]
	
{$result}

Copy<br>Output<br>
Banana
Potato
	
50

Copy<br>The arrow symbol used to get a method's result in the template example, can not be changed with a custom dialect. Is a strict rule in Div.<br><a data-href="The __toString magic method" href="\documentation\div-php-template-engine\features\the-__tostring-magic-method.html" class="internal-link" target="_self" rel="noopener">The __toString magic method</a><br>
<a data-href="Content like an object (intelligent data)" href="\documentation\div-php-template-engine\features\content-like-an-object-(intelligent-data).html" class="internal-link" target="_self" rel="noopener">Content like an object (intelligent data)</a>]]></description><link>documentation\div-php-template-engine\features\object-oriented-programming.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Object Oriented Programming.md</guid><pubDate>Sun, 28 Jan 2024 15:45:57 GMT</pubDate></item><item><title><![CDATA[Pre-defined sub-parsers]]></title><description><![CDATA[ 
 <br>Div provide pre-defined sub-parsers. See the next list:<br>
<br>{parse} ... {/parse}: Make a pre-proccess of enclosed code. This means that a new instance of div will be created, similar to the loops and the capsules.
]]></description><link>documentation\div-php-template-engine\features\pre-defined-sub-parsers.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Pre-defined sub-parsers.md</guid><pubDate>Sun, 28 Jan 2024 14:52:33 GMT</pubDate></item><item><title><![CDATA[Simple replacements]]></title><description><![CDATA[ 
 <br>A simple replacement is the replacement of parts of the template with any content. The variable can be contain a mixed value:<br>
<br>If the value is a string, the replacement is the string.
<br>If the value is a number, the replacement is the "number".
<br>If the value is an array, the replacement is the length of the array.
<br>If the value is an object without __toString method implemented, the replacement is the count of properties of the object.
<br>Syntax in templates<br>{$varname}
Copy<br>Example:<br>index.php<br>&lt;?php
	
include 'div.php';
	
echo new div('index.tpl', [
	'first_name' =&gt; 'Peter',
	'last_name' =&gt; 'Pan'
]);
Copy<br>index.tpl<br>First name: {$first_name}
Last name: {$last_name}
Copy<br>Output<br>First name: Peter
Last name: Pan
Copy]]></description><link>documentation\div-php-template-engine\features\simple-replacements.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Simple replacements.md</guid><pubDate>Sun, 28 Jan 2024 14:09:34 GMT</pubDate></item><item><title><![CDATA[Special replacements]]></title><description><![CDATA[ 
 <br>Tags for output special characters that can be used always. The following table show the available tags and their replacements:<br><br>Example:<br>index.tpl<br>Hello{\n}Peter
{\t}Today is {/div.now:Y-m-d/}
Copy<br>Output<br>Hello
Peter
		Today is 2013-07-24
Copy]]></description><link>documentation\div-php-template-engine\features\special-replacements.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Special replacements.md</guid><pubDate>Sun, 28 Jan 2024 15:58:53 GMT</pubDate></item><item><title><![CDATA[String's dissection]]></title><description><![CDATA[ 
 <br>The scalar values as a complex values. All the scalar values can be used as a strings. Then, the strings can be used like complex values, that is to say, as group of characters. For example:<br>{= name: "Peter" =}
	  
&lt;!-- Show the first character --&gt;
{$name.0} 
	  
&lt;!-- Show the second character --&gt;
{$name.1}
	  
{= x: 537 =}
	  
&lt;!-- Show the first digit --&gt;
{$x.0} 
	  
&lt;!-- Show the second digit --&gt;
{$x.1}
	    
&lt;!-- Spacify the name --&gt;
[$name]{$value} [/$name]
	  
&lt;!-- Multiply the digits of x --&gt;
[$x] {$value} * [/$x] = (# [$x] {$value} * [/$x] 1 #)
Copy<br>Output<br>P
	 
e
	  
5
	
3
	
P e t e r
	  
5 * 3 * 7 = 105
Copy]]></description><link>documentation\div-php-template-engine\features\string's-dissection.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/String's dissection.md</guid><pubDate>Sun, 28 Jan 2024 14:09:11 GMT</pubDate></item><item><title><![CDATA[Strip or clean the resulting code]]></title><description><![CDATA[ 
 <br>Clean the resulting code of the parser, eliminating double spaces, unnecessary new lines, etc.<br>Syntax in templates<br>
{strip}
	... some ugly code here ...
{/strip}

Copy<br>Example<br>index.tpl<br>{strip}
Hello Jack, ...
	
          ...the previous lines are of more.
{/strip}
Copy<br>Output<br>Hello Jack, ...
...the previous lines are of more.
Copy]]></description><link>documentation\div-php-template-engine\features\strip-or-clean-the-resulting-code.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Strip or clean the resulting code.md</guid><pubDate>Sun, 28 Jan 2024 14:48:34 GMT</pubDate></item><item><title><![CDATA[Sub-parser's events]]></title><description><![CDATA[ 
 <br>Each sub-parser is processed in some different moments. At the moment, the events are: beforeParse, afterInclude and afterParse. Now in the templates's code you can specify when a sub-parser will be executed. The moment, or the event, can be specified in the template as following example:<br>index.tpl<br>{= name: "Peter" =}
{= products: [
	{
		name: "banana",
		price: 40
	},
	{
		name: "potato",
		price: 25
	}
] =}
	
[$products]
	{parse:beforeParse}
	Name: {$name}
	{/parse:beforeParse}
		
	Product name: {$name}
		
	{% other %}
[/$products]

Copy<br>other.tpl<br>{parse:beforeParse}
	Other name: {$name}
{/parse:beforeParse}
Copy<br>Output<br>Name: Peter
Product name: banana
Other name: banana
Name: Peter
Product name: potato
Other name: potato
Copy]]></description><link>documentation\div-php-template-engine\features\sub-parser's-events.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Sub-parser's events.md</guid><pubDate>Sun, 28 Jan 2024 14:52:53 GMT</pubDate></item><item><title><![CDATA[Sub-parsers]]></title><description><![CDATA[ 
 <br>The sub-parsers are parsers that run before the main parser of div, like as <a data-href="Ignored parts (escaping Div parsing)" href="\documentation\div-php-template-engine\features\ignored-parts-(escaping-div-parsing).html" class="internal-link" target="_self" rel="noopener">Ignored parts (escaping Div parsing)</a>&nbsp;. The custom sub-parsers are built by the programmer to perform&nbsp;pre-processing&nbsp;part of the template. The PHP implementation can be a function or static method. If you have implemented&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/features/custom-sub-parsers#oop" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/features/custom-sub-parsers#oop" target="_blank"><strong></strong></a>a class that inherits from div, and uses it to process your templates, then the sub-parser can be implemented in any method of that class.<br>For security reasons, the sub-parsers implemented as functions and static methods, must be registered prior to processing the template with&nbsp;div::setSubParser()&nbsp;method. Each sub-parser receive the template code to process and optionally the information provided to the engine. The string returned by the sub-parser will replace the content between pre-parse's tags.<br>Syntax in templates<br>{sub-parser-name}
	
	... this code will be sent to the sub-parser function/method ...
	
{/sub-parser-name}

	
Copy<br>Example<br>index.php<br>&lt;?php 
	
include "div.php";
	
/* Sub-parser as a function */
function literal($code){
	return "{ignore}$code{/ignore}";
}
	
/* Sub-parser as a function more complex */
function body($code, &amp;$items){
	$items['body'] = '&lt;p&gt;'.$code.'&lt;/p&gt;';
	return "";
}
	
/* Sub-parser as a method */
class MyPage extends div{
		
	/* You can set the sub-parsers in the constructor */
	public function beforeBuild(){
		
		// Sub-parser with their name different to the name of function  
		self::setSubParser('combobox', 'buildCombobox');
	}
		
	/* A sub-parser ... */
	public function buildCombobox($properties){
			
		$prop = self::jsonDecode('{'.$properties.'}');
			
		$html = "&lt;select name = \"{$prop-&gt;name}\"&gt;\n";
		foreach($prop-&gt;options as $option) {
			$html .= "&lt;option value=\"{$option-&gt;v}\"&gt;{$option-&gt;c}&lt;/option&gt;\n";
		}
		$html .= "&lt;/select&gt;\n";
			
		return $html;
	}
		
	/* Other sub-parser */
	public function upperthis($text, &amp;$items){
		$text = trim($text);
		if (self::issetVar($text, $items)) {
			$items[$text] = strtoupper($items[$text]);
		}
	}
}
	
/* Set sub-parsers before */
	
/* Same as MyPage::setSubParser("literal", "literal"); */
MyPage::setSubParser('literal');
	           
/* Alias for 'literal' */ 
MyPage::setSubParser('noparse','literal'); 
	
/* Name of sub-parser equal to name of function */
MyPage::setSubParser('body');              
	
/* Similar way ... */
div::setSubParser('upperthis');
	
echo new MyPage('index.tpl');

Copy<br>index.tpl<br>{body}
	Hello world, this is my first sub-parser
{/body}
	
{combobox}
    name: 'cboCities',
    options: [
        {v: 'NY', c: 'New York'}, 
        {v: 'PA', c: 'Paris'},
        {v: 'TK', c: 'Tokio'}
    ]
{/combobox}
	
{upperthis}body{/upperthis}
	
{$body}
	
{literal}
  {$body}
{/literal}

Copy<br>Output<br>&lt;select name = "cboCities"&gt;
  &lt;option value="NY"&gt;New York&lt;/option&gt;
  &lt;option value="PA"&gt;Paris&lt;/option&gt;
  &lt;option value="TK"&gt;Tokio&lt;/option&gt;
&lt;/select&gt;
	
&lt;P&gt;
	HELLO WORLD, THIS IS MY FIRST SUB-PARSER
&lt;/P&gt;
	
{$body}

Copy<br><a data-href="Pre-defined sub-parsers" href="\documentation\div-php-template-engine\features\pre-defined-sub-parsers.html" class="internal-link" target="_self" rel="noopener">Pre-defined sub-parsers</a><br>
<a data-href="Sub-parser's events" href="\documentation\div-php-template-engine\features\sub-parser's-events.html" class="internal-link" target="_self" rel="noopener">Sub-parser's events</a>]]></description><link>documentation\div-php-template-engine\features\sub-parsers.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Sub-parsers.md</guid><pubDate>Sun, 28 Jan 2024 14:53:29 GMT</pubDate></item><item><title><![CDATA[System vars]]></title><description><![CDATA[ 
 <br><br>Some system vars are available in the templates. This vars are provided by the engine. The following table shows the system vars:<br><br>Now then, all the variables of the system are not enabled by default. The system vars enabled by default are&nbsp;div.now,&nbsp;div.version,&nbsp;div.get&nbsp;and&nbsp;div.post.<br>If you need enable some system vars use the method&nbsp;div::enableSystemVar($varname). If you need disable a system var use the method&nbsp;div::disableSystemVar($varname).<br>Example<br>index.php<br>&lt;?php
	
session_start();
	
include 'div.php';
	
div::enableSystemVar('div.session');
	
if (isset($_GET['user'])){
	if ($_GET['user'] == 'peter'){
		$_SESSION['user'] = $_GET['user'];
	}
}
	
echo new div('index.tpl');

Copy<br>index.tpl<br>
?$div.session.user
	?$div.get.user
		- Welcome {$div.get.user}
	@else@
	 	- Access denied for user {$div.session.user}
	 	- Show the login form
	$div.get.user?
@else@
	Show the login form
$div.session.user?

Copy<br>Output<br>Testing the script with&nbsp;index.php?user=peter&nbsp;in the URL.<br>Welcome peter
Copy]]></description><link>documentation\div-php-template-engine\features\system-vars.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/System vars.md</guid><pubDate>Sun, 28 Jan 2024 15:46:53 GMT</pubDate></item><item><title><![CDATA[Template's documentation]]></title><description><![CDATA[ 
 <br>Div provides a functionality that create a documentation of your templates. The template's documentation is written in the comments with a specific syntax, similar to some programming languages. In each comment's line, the parser recognizes the documentation's properties and their values . The documentation's properties begin with @. See the example.<br>Now, a specific or restricted list of properties not exists. All the properties that you want to write in the comments will be saved by the parser. After parsing, getDocs returns the saved documentation's properties. With this information and a template, you can build the documentation that you want.<br>Now, don't invent the wheel. Use getDocsReadable method and obtain a readable documentation based on the saved properties and a template provided by Div. You can specify a custom template.<br>Important, the template given by Div if it is prepared to recognize certain properties that are listed now:<br><br>Syntax in templates<br>&lt;--{ 
	
	... unsaved content here ....
	
	@fist_saved_property value
	@other_property value
	@other_property value
	@other_property value
	@multiline_property: line1
		                     line2
		                     line3
	@other_multiline_property: 
	line1
	line2
	line3	
	...
		
}--&gt;
Copy<br>Example<br>index.tpl<br>&lt;--{ 
	
	The next comments are the documentation of this template
	
	@name My template
	@description My first template with documentation
	@author Me 
	@vars: required string title
	       optional string body 
		
		@example:
		{= title: "My first blog" =}
		{= body: "This is my first blog" =}
		{% blog.tpl %}
		
}--&gt;
Copy<br>index.php<br>&lt;?php
	
include 'div.php';
	
div::docsOn();
	
$tpl = new div('index.tpl');
$tpl-&gt;parse();
	
echo $tpl-&gt;getDocsReadable();
Copy]]></description><link>documentation\div-php-template-engine\features\template's-documentation.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Template's documentation.md</guid><pubDate>Sun, 28 Jan 2024 15:47:28 GMT</pubDate></item><item><title><![CDATA[Template's properties]]></title><description><![CDATA[ 
 <br>Each template can have properties and the designer is responsible for establishing them. The properties apply only to the file where they are defined.<br>The properties are defined in a single line using the following syntax:<br>@_property_name = property's value
Copy<br>For example, the following code sets the dialect of the template, where the value is the name of the file containing the dialect.<br>@_DIALECT = smarty.dialect
Copy<br>Properties are identified by the prefix&nbsp;@_.]]></description><link>documentation\div-php-template-engine\features\template's-properties.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Template's properties.md</guid><pubDate>Sun, 28 Jan 2024 15:47:47 GMT</pubDate></item><item><title><![CDATA[Template's variables]]></title><description><![CDATA[ 
 <br>This feature is dedicated to designers. The designers can declare variables in the template and to use them for different reasons.<br>The&nbsp;values&nbsp;of variables can be:<br>
<br>A string
<br>Another var
<br>An object or an array in JSON
<br>A call to method of the current PHP class
<br>The path of JSON file
<br>Important:If the value is not valid JSON, it will be considered as a template and will be parsed before decoding. See the next sequence:<br>1. Value is not valid JSON: {= digits: [[:0,8:]{$value},[/]9] =}
2. Value was parsed:        {= digits: [0,1,2,3,4,5,6,7,8,9] =}
3. Now "digists" is an array.
4. Replacement:             {$digits} &lt;!--{ OUTPUT "10" }--&gt;
Copy<br>See the difference:<br>1. Value is valid JSON:     {= digits: "[[:0,8:]{$value},[/]9]" =}
2. Value was not parsed:    {= digits: "[[:0,8:]{$value},[/]9]" =}
3. Now "digists" is an string.
4. Replacement:             {$digits} &lt;!--{ OUTPUT "[0,1,2,3,4,5,6,7,8,9]" }--&gt;
Copy<br>Syntax:<br>{= varname: ... value ... =}
	
A string
	
{= varname: some string here =}
	
An array in JSON
	
{= varname: [item1, item2, .... ] =}
	
An object in JSON
	
{= varname: {
		prop1: value1,
		prop2: value2,
		...
} =}
	
Get the value of another var
	
{=  var1: value1 =}
{=  var2: $var1 =}
	
Call to method of current PHP class
	
{= sum: -&gt;sum(20,30) =}
	
Copy<br>See also&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/features/templates-variables#oop" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/features/templates-variables#oop" target="_blank">OOP section.</a><br>The dollar symbol used to get a variable's value in the JSON, is not the modifier in simple replacements (DIV_TAG_MODIFIER_SIMPLE). This symbol can not be changed with a custom dialect. Is a strict rule in Div.<br>Example:<br>index.php<br>
echo new div('index.tpl', [
	'price' =&gt; 40
]);
Copy<br>index.tpl<br>
{= price: 20 =} 
	
Price: {$price}
	
{= labels: ['A','B','C','D'] =}
	
Labels: [$labels] {$value}!$_is_last, $_is_last! [/$labels]
	
{= product: {
		name: "Potato",
		price: 45
	} =}
	
Product: {$product.name}
	
Product's price: {$product.price}
	
{= somestring: Blah blah blah =}
	
String: {$somestring}
	
{= somevar: $price =}
	
Some var: {$somevar}
Copy<br>Output:<br>Price: 40
	
Labels: A, B, C, D

Product's price: Potato
	
Price: 45
	
String: Blah blah blah
	
Some var: 40
Copy<br><br>To protect the value of a teplate's variable, type an asterisk (*) before the variable's name:<br>
{= *protectedvar: "protected value" =}

Copy<br>Protect a template's variable means that after this protection, any intent of changing its value will be failed.<br><br>If you have a external template and its content is needed into a variable, the next trick can help you:<br>
{= varname: {% external-template %} =}

Copy<br>The "external content" are loaded "on demand". This means that the content will be loaded in first replacement of variable.]]></description><link>documentation\div-php-template-engine\features\template's-variables.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Template's variables.md</guid><pubDate>Sun, 28 Jan 2024 15:48:35 GMT</pubDate></item><item><title><![CDATA[The __toString magic method]]></title><description><![CDATA[ 
 <br>If an object has implemented the method toString, you can work with the object as a character string in three possible scopes: template's scope, loop body's scope and capsule's scope. You can use two possible variables to put the content returned by the implemented toString() method:<br>
<br>The variable&nbsp;$_to_string&nbsp;in template's scope.
<br>The variables&nbsp;$_to_string&nbsp;and&nbsp;$value&nbsp;in capsule and loop's body scopes.<br>

<br>Suppose that you have the following class:<br>Person.php<br>	
class Person{
		
	public function __construct($first_name, $last_name){
		$this-&gt;first_name = $first_name;
		$this-&gt;last_name;
	}
		
	public function __toString(){
		return $this-&gt;first_name." ".$this-&gt;last_name;
	}
	
}

Copy<br>Then, the following examples show the use of the variables:<br>Example 1: Template's scope<br>index.php<br>
	
include 'div.php';
	
include 'Person.php';
	
echo new div('index.tpl', new Person("Albert", "Einstein"));

Copy<br>index.tpl<br>
{$_to_string}

Copy<br>Outpput<br>
Albert Einstein

Copy<br>Example 2: Loop body's scope<br>index.php<br>&lt;?php
	
include 'div.php';
	
include 'Person.php';
	
echo new div('index.tpl', [
		"persons" =&gt; [
			new Person("Albert", "Einstein"),
			new Person("John", "Nash")
		]
));

Copy<br>index.tpl<br>
If Person not have a $value property:
	
[$persons]
	{$value}
[/$persons]
	
You can always use the variable $_to_string:
	
[$persons]
	{^^^_to_string}
[/$persons]

Copy<br>Output<br>
If Person not have a $value property:
	
	Albert Einstein
	John Nash
	
You can always use the variable $_to_string:
	
	ALBERT EINSTEIN
	JOHN NASH

Copy<br>Example 3: Capsule's scope<br>index.php<br>&lt;?php
	
include 'div.php';
	
include 'Person.php';
	
echo new div('index.tpl', [
	"person" =&gt; new Person("Albert", "Einstein")
]);

Copy<br>index.tpl<br>
[[person
	
 {$_to_string}
	
 {^^^value}
	
person]]

Copy<br>Output<br>
Albert Einstein
	
ALBERT EINSTEIN

Copy]]></description><link>documentation\div-php-template-engine\features\the-__tostring-magic-method.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/The __toString magic method.md</guid><pubDate>Sun, 28 Jan 2024 15:44:03 GMT</pubDate></item><item><title><![CDATA[Understanding the syntax]]></title><description><![CDATA[ 
 <br>Div parse the template language locating some syntax structures that have rules. In this section the structures and their rules are explained.<br><br><img alt="Pasted image 20240128115015.png" src="\lib\media\pasted-image-20240128115015.png"><br><br>The rigid blocks are those that are compound for a rigid syntaxis with prefix and a suffix. The rigid syntax is that in the one that each character has a meaning for the interpreter, in such way that characters are not allowed of more. That is to say, characters like the space (chr(32)), the tabs (\t) and the new lines (\n), that allow to beautify the code, won't be ignored by the interpreter and it will consider them like part of their syntactic analysis. In this blocks, the prefix and the suffix are required.<br>For example, if you write&nbsp;"{$text }"&nbsp;the name of the variable to substitute will include the space at the end, that is to say, it will be&nbsp;"text ".<br>Example of rigid blocks are&nbsp;<a data-href="Simple replacements" href="\documentation\div-php-template-engine\features\simple-replacements.html" class="internal-link" target="_self" rel="noopener">Simple replacements</a>&nbsp;and&nbsp;<a data-href="Including another templates" href="\documentation\div-php-template-engine\features\including-another-templates.html" class="internal-link" target="_self" rel="noopener">Including another templates</a>.<br><br><img alt="Pasted image 20240128115039.png" src="\lib\media\pasted-image-20240128115039.png"><br><br>The simple blocks are similar to the rigid blocks, with the difference that the prefix is named "begin", the suffix is named "end", and the syntaxis of the block is flexible. A flexible syntax is the opposite to a rigid syntax, where it is allowed to write characters to space or to format. In this blocks, the aperture tag and the closing tag are required.<br>Example of simple blocks are&nbsp;<a data-href="Ignored parts (escaping Div parsing)" href="\documentation\div-php-template-engine\features\ignored-parts-(escaping-div-parsing).html" class="internal-link" target="_self" rel="noopener">Ignored parts (escaping Div parsing)</a>, <a data-href="Comments" href="\documentation\div-php-template-engine\features\comments.html" class="internal-link" target="_self" rel="noopener">Comments</a> and <a data-href="Strip or clean the resulting code" href="\documentation\div-php-template-engine\features\strip-or-clean-the-resulting-code.html" class="internal-link" target="_self" rel="noopener">Strip or clean the resulting code</a><br><br><img alt="Pasted image 20240128115057.png" src="\lib\media\pasted-image-20240128115057.png"><br><br>The blocks without keywords are those where the aperture tag and the closing tag have a structure or specific content, so that it is not necessary a prefix and a suffix for the closing tag. In this sense the prefix and the suffix of the aperture tag are required, and as well as the closing tag.<br>Example of no-keyword blocks are&nbsp;<a data-href="Conditions" href="\documentation\div-php-template-engine\features\conditions.html" class="internal-link" target="_self" rel="noopener">Conditions</a> and <a data-href="Iterations" href="\documentation\div-php-template-engine\features\iterations.html" class="internal-link" target="_self" rel="noopener">Iterations</a><br><br><img alt="Pasted image 20240128115123.png" src="\lib\media\pasted-image-20240128115123.png"><br><br>The blocks with keywords are those where the aperture tag and the closing tag contain the name a variable, either simple or complex, accompanied by a prefix and a suffix in both cases. The prefix of the aperture tag and the suffix of the closing tag are required.<br>Example of keyword blocks are&nbsp;<a data-href="Conditional parts" href="\documentation\div-php-template-engine\features\conditional-parts.html" class="internal-link" target="_self" rel="noopener">Conditional parts</a> and <a data-href="Lists (loops)" href="\documentation\div-php-template-engine\features\lists-(loops).html" class="internal-link" target="_self" rel="noopener">Lists (loops)</a>]]></description><link>documentation\div-php-template-engine\features\understanding-the-syntax.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Understanding the syntax.md</guid><pubDate>Sun, 28 Jan 2024 14:51:25 GMT</pubDate><enclosure url="lib\media\pasted-image-20240128115015.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\pasted-image-20240128115015.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Variable's modifiers]]></title><description><![CDATA[ 
 <br>Variable's modifiers allow you to change the value of a variable or obtain information about the value in the templates, so they change the way they are displayed, such as a text in capital letters, etc..<br>Syntax in templates:<br>The following variable's modifiers can be used with the current version of Div:<br><br>Example:<br>index.tpl<br>{= title: mozilla firefox =}
{= body: A wonderful web browser=} 

Nothing to change: 
{$title}

Capitalize the first character of the string: 
{^title}

Capitalize the first character of each word of the string: 
{^^title}

Convert the entire string to uppercase:
{^^^title}

Convert the entire string to lowercase: 
{_title}

Count of characters: 
{%title}

Sub-string:

{$body:0,11}

Truncate: 

{$body:~25}...

Word wrap: 

{$body:/30}

Combining the modifiers:

{^^^body:0,11}

{^^^body:/40}

String format:

{= value: 10 =}

{$value:%1$04d}
Copy<br>Output:<br>Nothing to change: 
mozilla firefox

Capitalize the first character of the string: 
Mozilla firefox
	
Capitalize the first character of each word of the string: 
Mozilla Firefox
	
Convert to uppercase:
MOZILLA FIREFOX
	
Convert to lowercase: 
mozilla firefox
	
Count of characters: 
15
	
Sub-string:
web browser
	
Truncate: 
A wonderful...

Word wrap: 
A wonderful web browser


Combining the modifiers:
A WONDERFUL WEB BROWSER

A WONDERFUL

	
String format:
	
0010
Copy<br><a data-href="Custom modifiers" href="\documentation\div-php-template-engine\features\custom-modifiers.html" class="internal-link" target="_self" rel="noopener">Custom modifiers</a><br>
<a data-href="Multiple variable's modifiers" href="\documentation\div-php-template-engine\features\multiple-variable's-modifiers.html" class="internal-link" target="_self" rel="noopener">Multiple variable's modifiers</a>]]></description><link>documentation\div-php-template-engine\features\variable's-modifiers.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Variable's modifiers.md</guid><pubDate>Sun, 28 Jan 2024 14:32:11 GMT</pubDate></item><item><title><![CDATA[Variables (information, content...)]]></title><description><![CDATA[ 
 <br>The designer doesn't have reason to know what are a data type to make their work. It should simply consider to the variables of the design as "the information". For this reason, in the templates, Div normalizes all the information coming from PHP, considering an array, objects or combination of arrays and objects as "same things".<br>The information represents a hierarchy. You can access to all thier "pieces" using the dot "." operator.<br>Example:<br>index.php<br>&lt;?php

/* This code... */

echo new div('index.tpl', [
	'single' =&gt; 'something',
	'complex' =&gt; [
		'single' =&gt; 45,
		'subcomplex' =&gt; [
			'single' =&gt; '60'
		]
	]
]);

/* ... is similar to ... */

$complex = (object) [
	'single' =&gt; 45,
	'subcomplex' =&gt; [ 'single' =&gt; 60 ]

];

echo new div('index.tpl', [
	'single' =&gt; 'something',
	'complex' =&gt; $complex
]);

Copy<br>index.tpl<br>Single value: {$single}
Single value into complex var: {$complex.single}
And more: {$complex.subcomplex.single}
Copy<br>Output<br>Single value: something
Single value into complex var: 45
And more: 60
Copy<br><a data-href="String's dissection" href="\documentation\div-php-template-engine\features\string's-dissection.html" class="internal-link" target="_self" rel="noopener">String's dissection</a>]]></description><link>documentation\div-php-template-engine\features\variables-(information,-content...).html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Features/Variables (information, content...).md</guid><pubDate>Sun, 28 Jan 2024 14:09:16 GMT</pubDate></item><item><title><![CDATA[Goals]]></title><description><![CDATA[ 
 <br>
<br>One class, one file! Considering the template as an object.
<br>Create a minimum of highly descriptive syntax.
<br>Avoid a caching system.
<br>Improve algorithms.
<br>Reuse knowledge, write mechanisms and extend!
<br>
]]></description><link>documentation\div-php-template-engine\introduction\goals.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Introduction/Goals.md</guid><pubDate>Sun, 28 Jan 2024 14:04:55 GMT</pubDate></item><item><title><![CDATA[Possibilities for the designer]]></title><description><![CDATA[ 
 <br>The designer carries out its work in text files and he can use different tags. Div does not provide for the design obtrusive code. All that is programmed in the templates has a single goal: design.<br>
<br>Replace tags
<br>Apply&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/docs/div-php-template-engine/introduction/possibilities-designer#variable-modifiers" rel="noopener" class="external-link" href="https://divengine.org/docs/div-php-template-engine/introduction/possibilities-designer#variable-modifiers" target="_blank">variable's modifiers</a>: uppercase, lowercase, word count, paragraph count, string length, URL encode, convert everything to HTML entities
<br>Working with substrings
<br>Loops, iterations, cycles or repetitive parts
<br>Parts of templates displayed conditionally
<br>Evaluation conditions
<br>Definition of variables
<br>Divide the design into parts and then include or pre-process it
<br>Formatting Numbers and Dates
<br>Working with Formulas
<br>Comments
<br>Position of content
<br>Recursion: the engine processes the template over and over again until there is nothing to process
<br>Mechanism for the inheritance among templates
<br>Ignoring parts of the template
<br>Access to any specific value of the information passed by the programmer
<br>Access to methods of information's objects
<br>Aggregate functions: sum, average, minimum, maximum, count on.
<br>Clean the output
<br>Convert HTML to readable text
<br>Using the custom&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/docs/div-php-template-engine/introduction/possibilities-designer#subparsers" rel="noopener" class="external-link" href="https://divengine.org/docs/div-php-template-engine/introduction/possibilities-designer#subparsers" target="_blank">subparsers</a>&nbsp;implemented by the programmer.
]]></description><link>documentation\div-php-template-engine\introduction\possibilities-for-the-designer.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Introduction/Possibilities for the designer.md</guid><pubDate>Sun, 28 Jan 2024 14:05:10 GMT</pubDate></item><item><title><![CDATA[Possibilities for the programmer]]></title><description><![CDATA[ 
 <br>The programmer creates an instance of div class, specifying in its constructor, the template created by the designer and the information that will be displayed.<br>
<br>Rename the div class
<br>Define default file extensions
<br>Div class inheritance and object-oriented programming
<br>Define variables
<br>Defining global variables
<br>Define replacement values per variable
<br>Load data from a JSON file
<br>Ignore information variables passed to the constructor of the div class
<br>Debug
<br>Use class div instance as a string
<br>Implement some hooks
]]></description><link>documentation\div-php-template-engine\introduction\possibilities-for-the-programmer.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Introduction/Possibilities for the programmer.md</guid><pubDate>Sun, 28 Jan 2024 14:05:50 GMT</pubDate></item><item><title><![CDATA[Reasons]]></title><description><![CDATA[ 
 <br>Div is developed with the philosophy of reused knowledge. Of course, Div is released at the time of the well-known template engines that are widely used. For this reason, Div develops a minimum of new knowledge so that developers can quickly become familiar with this engine and understand when, how and why to use it.<br>Features are added if really needed. That is, if there is a need to add other functionality, we first analyze whether there is a mechanism to resolve this functionality, and then publish an article explaining how to implement this mechanism.<br>The argument for developing Div was obtained from several tests with PHP and we concluded that it is faster to replace the parts of the string than scripts included in PHP.<br>The fact is that substring replacement is a fast process but requires more memory. However, this consumption is so small that it is worth the sacrifice.<br>The development of div is to avoid creating a caching system because we believe that it is unnecessary based on its characteristics as an engine. A learning system may be enough: it can avoid repeated processing of the same templates.<br>Finally, the most popular engines are known to be composed of more than one file, classes, and libraries. Div sought from its inception, the implementation of everything in a single class, in a single file. This allows easy adaptation to existing development platforms.]]></description><link>documentation\div-php-template-engine\introduction\reasons.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Introduction/Reasons.md</guid><pubDate>Sun, 28 Jan 2024 14:06:03 GMT</pubDate></item><item><title><![CDATA[Components]]></title><description><![CDATA[ 
 <br>Complex GUIs are created with components. A component can reduces the effort dedicated in the production. Create a component with Div and for Div, is a very simple mechanism to implement. See the next example:<br><br>combobox.tpl<br>&lt;select id="{$id}" name="{$name}"&gt;
		[${$options}]
		&lt;option value="{$val}"&gt;{$text}&lt;/option&gt;
		[/${$options}]
&lt;/select&gt;
Copy<br>This component use:&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/mechanisms/components#simple-replacements" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/mechanisms/components#simple-replacements" target="_blank">simple replacements</a>,&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/mechanisms/components#lists" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/mechanisms/components#lists" target="_blank">lists</a>&nbsp;and&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/mechanisms/components#recursion" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/mechanisms/components#recursion" target="_blank">recursion</a>.<br><br>index.tpl<br>[[_empty
		{= id: "products" =}
		{= name: "products" =}
		{= options: "products" =}
		{% combobox %}
_empty]]
Copy<br>"Use a component" means "<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/mechanisms/components#include" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/mechanisms/components#include" target="_blank">include</a>&nbsp;the component", for example, into a&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/mechanisms/components#capsules" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/mechanisms/components#capsules" target="_blank">capsule</a>, that can be the&nbsp;_empty&nbsp;variable.<br><br>index.php<br>&lt;?php
	
echo new div('index.tpl', [
		'products' =&gt; [
			['val' =&gt; 1, 'text' =&gt; 'Banana'],
			['val' =&gt; 2, 'text' =&gt; 'Potato'],
			['val' =&gt; 3, 'text' =&gt; 'Apple']
		]
]);
Copy<br><br>&lt;select id="products" name="products"&gt;
	&lt;option value="1"&gt;Banana&lt;/option&gt;
	&lt;option value="2"&gt;Potato&lt;/option&gt;
	&lt;option value="3"&gt;Apple&lt;/option&gt;
&lt;/select&gt;
Copy]]></description><link>documentation\div-php-template-engine\mechanisms\components.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Mechanisms/Components.md</guid><pubDate>Sun, 28 Jan 2024 14:54:25 GMT</pubDate></item><item><title><![CDATA[Recursion]]></title><description><![CDATA[ 
 <br>Div interprets the template until it is not anything to interpret. For that reason, the recursion is implicit and is an intrinsic characteristic of the eninge.<br>If you have a code like '{list}}' and&nbsp;$list = 'products'&nbsp;then the engine convert this code to '{$products}' and if you have another variable&nbsp;$products&nbsp;with your list of products, the engine replace it, in this example, with the count of products.<br>Low performance? No! The implementation of Div is not a recursive algorithm. The recursion is only a mechanism for the designer. Don't worry.<br>The recursion is very useful in the creation of&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/mechanisms/recursion#components" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/mechanisms/recursion#components" target="_blank">components</a>.&nbsp;<br>Example<br>index.php<br>&lt;?php
	
include 'div.php';
	
$product = new stdClass();
	
$product-&gt;name = 'Banana';
$product-&gt;price = 20.5;
	
echo new div('index.tpl', [
		'product' =&gt; $product,
		'object' =&gt; 'product'
]);
Copy<br>index.tpl<br>Origin<br>[${$object}]
	
{$_key} = {$value}
	
[/${$object}]
Copy<br>Step 1<br>[$product]
	
{$_key} = {$value}
	
[/$product]
Copy<br>Step 2<br>[$product]
	
name = {$value}
	
[/$product]
Copy<br>Step 3<br>[$product]
	
name = Banana
price = {$value}
	
[/$product]
Copy<br>Step 4<br>name = Banana
price = 20.5
Copy]]></description><link>documentation\div-php-template-engine\mechanisms\recursion.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Mechanisms/Recursion.md</guid><pubDate>Sun, 28 Jan 2024 14:55:07 GMT</pubDate></item><item><title><![CDATA[Templates inheritance]]></title><description><![CDATA[ 
 <br>The inheritance allows you to construct a base template that contains all the common elements and defines "zones" that other templates can change. At the moment Div doesn't provide the template inheritance explicitly. But we wonder if it is really necessary.<br>For those that don't know about this topic, the template inheritance means that a template can inherit the design of another template and then redesign the necessary parts.<br>The templates inheritance can be solved with inclusions in engines that don't provide the inheritance, but it can be a not very elegant solution. Does Div have some mechanism that can be considered a solution for the templates inheritance?<br>Div considers that the templates inheritance can be solved with some of their features, like as inclusions, default values, template vars, locations and recursion. This section explain three variants for implement the inheritance.<br><br>This way, when you write<br>{% block %}  <br>Or  <br>{% {$block} %}<br>the variable $block can have a default value and then this code can be include different templates. You can call this mechanism as&nbsp;"switch".<br><br>Another way to implement inheritance is using the template variables. In the parent template defines a block as it defines a template variable, then the variable positions in place of the template you want. In the child template redefines the "blocks" (<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/mechanisms/templates-inheritance#protected-template-vars" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/mechanisms/templates-inheritance#protected-template-vars" target="_blank">protected template's variables</a>) and then includes the parent template.<br>Example<br>parent.tpl<br>	... any code ...
{= block1:
	
... code of block 1 ...
	
=}
	
... another code...
	
{$block1}
Copy<br>child.tpl<br>{= *block1:
	
	... another code for block 1 ...
	
=}
	
{% parent %}
Copy<br><br>This is the most elegant solution because you not need to define a variable. In the parent template you define the locations of the common content (for example "top", "header", "footer", "left", "right", etc), and then in the child template you can locate contents in the parent's locations.<br>Example<br>parent.tpl<br>... any code ...
	
(( block1 ))
	
... another code...
	
{= parent_block1:
	
... code block 1 written by the parent ...
	
=}
Copy<br>child.tpl<br>{% parent %}
	
{{block1
	
	{$parent_block1}
	
... The child's content ...
	
block1}}
Copy<br>Output<br>... any code ...
	
... code block 1 written by the parent ...
... The child's content ...
	
... another code...
Copy]]></description><link>documentation\div-php-template-engine\mechanisms\templates-inheritance.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Mechanisms/Templates inheritance.md</guid><pubDate>Sun, 28 Jan 2024 15:38:39 GMT</pubDate></item><item><title><![CDATA[Appendixes]]></title><description><![CDATA[ 
 <br><a data-href="Appendix A - Allowed PHP functions" href="\documentation\div-php-template-engine\appendixes\appendix-a-allowed-php-functions.html" class="internal-link" target="_self" rel="noopener">Appendix A - Allowed PHP functions</a><br>
<a data-href="Appendix B - Comparison of syntax of Smarty and Div" href="\documentation\div-php-template-engine\appendixes\appendix-b-comparison-of-syntax-of-smarty-and-div.html" class="internal-link" target="_self" rel="noopener">Appendix B - Comparison of syntax of Smarty and Div</a>]]></description><link>documentation\div-php-template-engine\appendixes.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Appendixes.md</guid><pubDate>Sun, 28 Jan 2024 15:54:58 GMT</pubDate></item><item><title><![CDATA[Div PHP Template Engine]]></title><description><![CDATA[<a class="tag" href="?query=tag:templates" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#templates</a> 
 <br>Template engine for PHP, with a powerful features for programmers and template's designers. This solution are implemented in a single class, in one file, considering the template like an object.<br><a data-tooltip-position="top" aria-label="https://github.com/anuraghazra/github-readme-stats" rel="noopener" class="external-link" href="https://github.com/anuraghazra/github-readme-stats" target="_blank"></a><img alt="Readme Card" src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=div&amp;show_owner=true&amp;rand=23" referrerpolicy="no-referrer"><br><a data-href="Introduction to Div PHP Template Engine" href="\documentation\div-php-template-engine\introduction-to-div-php-template-engine.html" class="internal-link" target="_self" rel="noopener">Introduction to Div PHP Template Engine</a><br>
<a data-href="The div class" href="\documentation\div-php-template-engine\the-div-class.html" class="internal-link" target="_self" rel="noopener">The div class</a><br>
<a data-href="The best practices" href="\documentation\div-php-template-engine\the-best-practices.html" class="internal-link" target="_self" rel="noopener">The best practices</a><br>
<a data-href="Template Engine Features" href="\documentation\div-php-template-engine\template-engine-features.html" class="internal-link" target="_self" rel="noopener">Template Engine Features</a><br>
<a data-href="Methods's reference" href="\documentation\div-php-template-engine\methods's-reference.html" class="internal-link" target="_self" rel="noopener">Methods's reference</a><br>
<a data-href="Mechanisms" href="\documentation\div-php-template-engine\mechanisms.html" class="internal-link" target="_self" rel="noopener">Mechanisms</a><br>
<a data-href="Appendixes" href="\documentation\div-php-template-engine\appendixes.html" class="internal-link" target="_self" rel="noopener">Appendixes</a><br><a href=".?query=tag:templates" class="tag" target="_blank" rel="noopener">#templates</a>]]></description><link>documentation\div-php-template-engine\div-php-template-engine.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Div PHP Template Engine.md</guid><pubDate>Mon, 12 Feb 2024 14:52:50 GMT</pubDate><enclosure url="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=div&amp;show_owner=true&amp;rand=23" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=div&amp;show_owner=true&amp;rand=23"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Ignore specific variables (the third parameter of constructor)]]></title><description><![CDATA[ 
 <br>If you want that the engine ignore some variables in template, specify the variables as a list of names in the third parameter of constructor:<br>/* Third parameter as array */
	
echo new div('index.tpl', ['name' =&gt; 'Peter'], ['name']);
	
/* Third parameter as string  */
	
echo new div('index.tpl',['name' =&gt; 'Peter', 'age' =&gt; 25, 'sex' =&gt; 'M'], 'name,age');
Copy]]></description><link>documentation\div-php-template-engine\ignore-specific-variables-(the-third-parameter-of-constructor).html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Ignore specific variables (the third parameter of constructor).md</guid><pubDate>Sun, 28 Jan 2024 14:06:58 GMT</pubDate></item><item><title><![CDATA[Introduction to Div PHP Template Engine]]></title><description><![CDATA[ 
 <br>Div is a [template] engine and [code generator tool] written in&nbsp;<a data-tooltip-position="top" aria-label="http://php.net/" rel="noopener" class="external-link" href="http://php.net/" target="_blank">PHP</a>&nbsp;and developed since 2011, that allows the separation of labor between developers and designers, and improve the software development based on [Generative Programming], [Model Driven Architecture] and [Meta programming].<br>As the designer or developer built templates with some specific tags, other developers or designers uses the template to replace these tags with data or more template code. Div have a compact, flexible and descriptive syntax for templates:<br>
<br>"compact" means "a minimum of code for template language"
<br>"flexible" means "you can create dialects of template language"
<br>"descriptive" means "template language talk by herself"
<br>This project is the main piece of the organization&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.com/" rel="noopener" class="external-link" href="https://divengine.com/" target="_blank">Div Software Solutions</a>, following the philosophy of "build more with less" and "divide the problem and not to the people". To obtain this goal, Div propose the [code generation based on templates], following this rules:<br>
<br>The&nbsp;model&nbsp;will have all information about&nbsp;"what do you want to do"
<br>The&nbsp;templates&nbsp;will have all information about&nbsp;"what results you expect"
<br>The&nbsp;engine&nbsp;if the black-box that achieve the&nbsp;"how to make it".
<br>Then, exists these basics operations:<br>
<br>Operation #1.&nbsp;Compile&nbsp;a template with models and save the result
<br>Operation #2.&nbsp;Transform&nbsp;a model to another, reusing Operation #1.
<br>Operation #3.&nbsp;Compose&nbsp;different results, using the engine and other tools.
<br>When you have white these rules, then you will be able to use your imagination and you will be able to achieve the following results, and any combination of them:<br>
<br>Avoid repetitive tasks in the programming
<br>Save your models and reuse them in another project
<br>Scaling your project based in your models.
<br>Migrate your project to different technology
<br>Take advantage of your models and develop parallel versions
<br>Expand your application in other platforms and devices
<br>Improve the performance of your application
<br>Make a documentation of your work
<br>Involve the "non technician" people in the development of the project
<br><a data-href="Goals" href="\documentation\div-php-template-engine\introduction\goals.html" class="internal-link" target="_self" rel="noopener">Goals</a><br>
<a data-href="Possibilities for the designer" href="\documentation\div-php-template-engine\introduction\possibilities-for-the-designer.html" class="internal-link" target="_self" rel="noopener">Possibilities for the designer</a><br>
<a data-href="Possibilities for the programmer" href="\documentation\div-php-template-engine\introduction\possibilities-for-the-programmer.html" class="internal-link" target="_self" rel="noopener">Possibilities for the programmer</a><br>
<a data-href="Reasons" href="\documentation\div-php-template-engine\introduction\reasons.html" class="internal-link" target="_self" rel="noopener">Reasons</a>]]></description><link>documentation\div-php-template-engine\introduction-to-div-php-template-engine.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Introduction to Div PHP Template Engine.md</guid><pubDate>Sun, 28 Jan 2024 16:06:16 GMT</pubDate></item><item><title><![CDATA[Mechanisms]]></title><description><![CDATA[ 
 <br><a data-href="Components" href="\documentation\div-php-template-engine\mechanisms\components.html" class="internal-link" target="_self" rel="noopener">Components</a><br>
<a data-href="Recursion" href="\documentation\div-php-template-engine\mechanisms\recursion.html" class="internal-link" target="_self" rel="noopener">Recursion</a><br>
<a data-href="Templates inheritance" href="\documentation\div-php-template-engine\mechanisms\templates-inheritance.html" class="internal-link" target="_self" rel="noopener">Templates inheritance</a>]]></description><link>documentation\div-php-template-engine\mechanisms.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Mechanisms.md</guid><pubDate>Mon, 29 Jan 2024 18:04:38 GMT</pubDate></item><item><title><![CDATA[Methods's reference]]></title><description><![CDATA[ 
 <br><br>div::addCustomModifier(string&nbsp;$prefix,&nbsp;string&nbsp;$function)<br>Add a&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/methodss-reference#custom-modifiers" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/methodss-reference#custom-modifiers" target="_blank">custom variable's modifier</a>. The modifier function should have a single parameter.<br>div::asThis(mixed&nbsp;$mixed)<br>Return mixed value as HTML format, (util for debug and fast presentation)<br>div::atLeastOneString(string&nbsp;$haystack,&nbsp;array&nbsp;$needles)<br>Return true if at least one needle is contained in the haystack<br>div::delDefault(mixed&nbsp;$search)<br>Remove a default replacement<br>div::delDefaultByVar(string&nbsp;$var,&nbsp;mixed&nbsp;$search)<br>Remove a default replacement for specific variable<br>div::delGlobal(string&nbsp;$var)<br>Remove a global var<br>div::disableSystemVar(string&nbsp;$var)<br>Disable&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/methodss-reference#system-vars" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/methodss-reference#system-vars" target="_blank">system var</a>&nbsp;for performance<br>div::enableSystemVar(string&nbsp;$var)<br>Enable&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/methodss-reference#system-vars" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/methodss-reference#system-vars" target="_blank">system var</a>&nbsp;for utility<br>div::error(string&nbsp;$errmsg,&nbsp;string&nbsp;$level = 'WARNING')<br>Show error and die<br>div::fileExists(string&nbsp;$filename)<br>Secure 'file exists' method<br>div::getLastKeyOfArray(array&nbsp;$arr)<br>Return the last key of array or null if not exists<br>div::getCountOfParagraphs(string&nbsp;$text)<br>Count a number of paragraphs in a text<br>div::getCountOfSentences(string&nbsp;$text)<br>Count a number of sentences in a text<br>div::getCountOfWords(string&nbsp;$text)<br>Count a number of words in a text<br>div::getDefault(mixed&nbsp;$value)<br>Return a default replacement of value<br>div::getDefaultByVar(string&nbsp;$var,&nbsp;mixed&nbsp;$value)<br>Return a default replacement of value by var<br>div::getSystemData()<br>Return the&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/methodss-reference#system-vars" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/methodss-reference#system-vars" target="_blank">loaded data from the system</a><br>div::getVarsFromCode(string&nbsp;$code)<br>Return a list of vars from PHP code<br>div::haveVarsThisCode(string&nbsp;$code)<br>Return true if the PHP code have any var<br>div::htmlToText(string&nbsp;$html,&nbsp;integer&nbsp;$width = 50)<br>Convert HTML to plain and formated text<br>div::isArrayOfArray(array&nbsp;$arr)<br>Return true if $arr is array of array<br>div::isArrayOfObjects(array&nbsp;$arr)<br>Return true if $arr is array of objects<br>div::isCli()<br>Return true if the script was executed in the CLI enviroment<br>div::isNumericList(array&nbsp;$arr)<br>Return true if $arr is array of numbers<br>div::isValidExpression(string&nbsp;$code)<br>Check if code is a valid expression<br>div::isDir(string&nbsp;$dirname)<br>Secure 'is_dir' method<br>div::isString(mixed&nbsp;$valur)<br>Secure 'is_string' method<br>div::jsonDecode(string&nbsp;$str)<br>JSON Decode<br>div::jsonEncode(mixed&nbsp;$data)<br>JSON Encode<br>div::log(string&nbsp;$msg,&nbsp;string&nbsp;$level = ' ')<br>Write a message in the log file<br>div::logOn(string&nbsp;$logfile)<br>Activate the debug mode for Div and write the logs into $logfile.<br>div::mixedBool(mixed&nbsp;$value)<br>Return any value as a boolean<br>div::setAllowedFunction({$src} $funcname)<br>Allow a function for the&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/methodss-reference#formulas" rel="noopener" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/methodss-reference#formulas" target="_blank">formulas</a><br>div::setDefault(mixed&nbsp;$search,&nbsp;mixed&nbsp;$replace)<br>Add or set a default replacement of value<br>div::setDefaultByVar(string&nbsp;$var,&nbsp;mixed&nbsp;$search,&nbsp;mixed&nbsp;$replace,&nbsp;bool&nbsp;$update = true)<br>Add or set a default replacement of value for a specific var<br>div::unsetAllowedFunction(string&nbsp;$funcname)<br>Unset the allowed function<br>div::utf162utf8(string&nbsp;$utf16)<br>Convert string from UTF16 to UTF18<br>div::varExists(string&nbsp;$var,&nbsp;mixed&nbsp;&amp;$items = null)<br>Return true if var exists in the template's items recursively]]></description><link>documentation\div-php-template-engine\methods's-reference.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Methods's reference.md</guid><pubDate>Sun, 28 Jan 2024 15:49:07 GMT</pubDate></item><item><title><![CDATA[Noteworthy Issues]]></title><description><![CDATA[ 
 <br>Explore the following list of noteworthy issues that have been addressed or are currently under discussion. These issues are significant and have played a crucial role in shaping the development and improvement of the project. Click on the links below to dive into the details of each issue<br>
<br><a rel="noopener" class="external-link" href="https://github.com/divengine/div/issues/7" target="_blank">https://github.com/divengine/div/issues/7</a> 
]]></description><link>documentation\div-php-template-engine\noteworthy-issues.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Noteworthy Issues.md</guid><pubDate>Mon, 12 Feb 2024 19:29:49 GMT</pubDate></item><item><title><![CDATA[Template Engine Features]]></title><description><![CDATA[ 
 <br><a data-href="Variables (information, content...)" href="\documentation\div-php-template-engine\features\variables-(information,-content...).html" class="internal-link" target="_self" rel="noopener">Variables (information, content...)</a><br>
<a data-href="Simple replacements" href="\documentation\div-php-template-engine\features\simple-replacements.html" class="internal-link" target="_self" rel="noopener">Simple replacements</a><br>
<a data-href="Special replacements" href="\documentation\div-php-template-engine\features\special-replacements.html" class="internal-link" target="_self" rel="noopener">Special replacements</a><br>
<a data-href="Variable's modifiers" href="\documentation\div-php-template-engine\features\variable's-modifiers.html" class="internal-link" target="_self" rel="noopener">Variable's modifiers</a><br>
<a data-href="Data formats" href="\documentation\div-php-template-engine\features\data-formats.html" class="internal-link" target="_self" rel="noopener">Data formats</a><br>
<a data-href="Formulas" href="\documentation\div-php-template-engine\features\formulas.html" class="internal-link" target="_self" rel="noopener">Formulas</a><br>
<a data-href="Ignored parts (escaping Div parsing)" href="\documentation\div-php-template-engine\features\ignored-parts-(escaping-div-parsing).html" class="internal-link" target="_self" rel="noopener">Ignored parts (escaping Div parsing)</a><br>
<a data-href="Comments" href="\documentation\div-php-template-engine\features\comments.html" class="internal-link" target="_self" rel="noopener">Comments</a><br>
<a data-href="Capsules" href="\documentation\div-php-template-engine\features\capsules.html" class="internal-link" target="_self" rel="noopener">Capsules</a><br>
<a data-href="HTML to plain text" href="\documentation\div-php-template-engine\features\html-to-plain-text.html" class="internal-link" target="_self" rel="noopener">HTML to plain text</a><br>
<a data-href="Lists (loops)" href="\documentation\div-php-template-engine\features\lists-(loops).html" class="internal-link" target="_self" rel="noopener">Lists (loops)</a><br>
<a data-href="Iterations" href="\documentation\div-php-template-engine\features\iterations.html" class="internal-link" target="_self" rel="noopener">Iterations</a><br>
<a data-href="Conditional parts" href="\documentation\div-php-template-engine\features\conditional-parts.html" class="internal-link" target="_self" rel="noopener">Conditional parts</a><br>
<a data-href="Conditions" href="\documentation\div-php-template-engine\features\conditions.html" class="internal-link" target="_self" rel="noopener">Conditions</a><br>
<a data-href="Global vars" href="\documentation\div-php-template-engine\features\global-vars.html" class="internal-link" target="_self" rel="noopener">Global vars</a><br>
<a data-href="Aggregate functions" href="\documentation\div-php-template-engine\features\aggregate-functions.html" class="internal-link" target="_self" rel="noopener">Aggregate functions</a><br>
<a data-href="Dialects" href="\documentation\div-php-template-engine\features\dialects.html" class="internal-link" target="_self" rel="noopener">Dialects</a><br>
<a data-href="Friendly tags" href="\documentation\div-php-template-engine\features\friendly-tags.html" class="internal-link" target="_self" rel="noopener">Friendly tags</a><br>
<a data-href="Sub-parsers" href="\documentation\div-php-template-engine\features\sub-parsers.html" class="internal-link" target="_self" rel="noopener">Sub-parsers</a><br>
<a data-href="Including another templates" href="\documentation\div-php-template-engine\features\including-another-templates.html" class="internal-link" target="_self" rel="noopener">Including another templates</a><br>
<a data-href="Default replacements" href="\documentation\div-php-template-engine\features\default-replacements.html" class="internal-link" target="_self" rel="noopener">Default replacements</a><br>
<a data-href="Including pre-processed templates" href="\documentation\div-php-template-engine\features\including-pre-processed-templates.html" class="internal-link" target="_self" rel="noopener">Including pre-processed templates</a><br>
<a data-href="Locations" href="\documentation\div-php-template-engine\features\locations.html" class="internal-link" target="_self" rel="noopener">Locations</a><br>
<a data-href="Macros" href="\documentation\div-php-template-engine\features\macros.html" class="internal-link" target="_self" rel="noopener">Macros</a><br>
<a data-href="Multi replacements" href="\documentation\div-php-template-engine\features\multi-replacements.html" class="internal-link" target="_self" rel="noopener">Multi replacements</a><br>
<a data-href="Object Oriented Programming" href="\documentation\div-php-template-engine\features\object-oriented-programming.html" class="internal-link" target="_self" rel="noopener">Object Oriented Programming</a><br>
<a data-href="Strip or clean the resulting code" href="\documentation\div-php-template-engine\features\strip-or-clean-the-resulting-code.html" class="internal-link" target="_self" rel="noopener">Strip or clean the resulting code</a><br>
<a data-href="System vars" href="\documentation\div-php-template-engine\features\system-vars.html" class="internal-link" target="_self" rel="noopener">System vars</a><br>
<a data-href="Template's documentation" href="\documentation\div-php-template-engine\features\template's-documentation.html" class="internal-link" target="_self" rel="noopener">Template's documentation</a><br>
<a data-href="Template's properties" href="\documentation\div-php-template-engine\features\template's-properties.html" class="internal-link" target="_self" rel="noopener">Template's properties</a><br>
<a data-href="Template's variables" href="\documentation\div-php-template-engine\features\template's-variables.html" class="internal-link" target="_self" rel="noopener">Template's variables</a>]]></description><link>documentation\div-php-template-engine\template-engine-features.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/Template Engine Features.md</guid><pubDate>Sun, 28 Jan 2024 16:03:15 GMT</pubDate></item><item><title><![CDATA[The best practices]]></title><description><![CDATA[ 
 <br>
<br>The design should not "guess" the content: The developers in occasions give this task to the template, and they obtain content using the possibilities of the language of templates, when in fact this it is the programmer's task. For example, it is an error to calculate in the template the amounts of the products of an invoice and the total amount, although this it can seem an example of the use of&nbsp;<a data-tooltip-position="top" aria-label="https://divengine.org/docs/div-php-template-engine/best-practices#aggregate-functions" rel="noopener" class="external-link" title="Go to section related to: aggregate functions" href="https://divengine.org/docs/div-php-template-engine/best-practices#aggregate-functions" target="_blank"><strong></strong></a>aggregate functions. The language of templates is not conceived to obtain the lacking information, but to make a good design.
<br>The design should be very wrapped to the content and vice versa: Try to balance the content built in the programming, with the content manipulated in the template, so that it doesn't have more than enough content, which the motor has to discard, neither have more than enough template code, which the motor also ends ignoring.
<br>Divide the design as much as it is possible and not so much that it is absurd: Try to build the templates so that they complete the smallest quantity in objectives and that they are the smallest possible, and therefore reusable. Don't build big templates with many conditions where most is discarded. The developers sometimes mix the templates some with other, to have everything in a file and this diminishes the performance of the project. For example, it is not good practice to have two templates in one, prepared for two different contents separated by a since condition this implies to have another decision variable. If you have not found another solution, divide the template in two parts, make a third and use the inclusions or the pre-processed templates. But remember, it is not good practice to have an isolated template that it is included and always for one template, and therefore it is not reused neither conditionally loaded.
]]></description><link>documentation\div-php-template-engine\the-best-practices.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/The best practices.md</guid><pubDate>Sun, 28 Jan 2024 14:07:48 GMT</pubDate></item><item><title><![CDATA[The div class]]></title><description><![CDATA[ 
 <br>All implementation of Div is the&nbsp;div&nbsp;class and different forms exist of using it.&nbsp;If you have another class named "div", you can rename the div class.<br>First, include the div.php file:<br>&lt;?php

include "div.php";

// or using composer

include "path/to/vendor/autoload.php";

// div class is inside the "divengine" namespace

use divengine\div;
Copy<br>Variant 1: All in one instruction<br>echo new div('Hello {$name}', [
	'name' =&gt; 'Peter'
]);
Copy<br>Variant 2: First instance, then show<br>
$t = new div('Hello {$name}', ['name' =&gt; 'Peter']);
	
echo $t; /* or $t-&gt;show(); */
Copy<br>Variant 3: The template in external file<br>
/* The file index.tpl contain the template code */
 
echo new div('index.tpl', ['name' =&gt; 'Peter']);
Copy<br>Variant 4: The data as JSON code<br>
echo new div('Hello {$name}', '{name: "Peter"}');

Copy<br>Variant 5: The data in JSON file<br>/* The file index.json contain the data as JSON code */

echo new div('index.tpl', 'index.json');
Copy<br><a data-href="Ignore specific variables (the third parameter of constructor)" href="\documentation\div-php-template-engine\ignore-specific-variables-(the-third-parameter-of-constructor).html" class="internal-link" target="_self" rel="noopener">Ignore specific variables (the third parameter of constructor)</a>]]></description><link>documentation\div-php-template-engine\the-div-class.html</link><guid isPermaLink="false">Documentation/Div PHP Template Engine/The div class.md</guid><pubDate>Sun, 28 Jan 2024 14:07:17 GMT</pubDate></item><item><title><![CDATA[Call a static method]]></title><description><![CDATA[ 
 <br>app/control/Home.php<br>&lt;?php

#id = home
#listen = /home

class Home {
	
	static function Run()
	{
	    echo "Hello world";
	}
		
	static function About()
	{
		echo "About us";
	}
	
	#listen@Contact = get://about
	static function Contact()
	{
		echo "Contact us";
	}
}
Copy<br>index.php<br>&lt;?php

// register a controller with the default static method ::Run()
ways::register("app/control/Home.php");

// route to another static method ([controllerID]@[method])
ways::listen("/about", "home@About");

// route to closure
ways::listen("/sayMeHello/{name}", function($data, $args) {
	echo "Hello {$args['name']}";	
});

// hook on the fly
ways::hook(DIV_WAYS_BEFORE_RUN, 
	ways::listen("/tests/...", function(){
		
		ways::listen("/tests/1", function(){
			echo "This is the test 1";
		}); 	
		
		ways::listen("/tests/2", function(){
			echo "This is the test 2";
		});
		
		if (ways::match("/tests/3")) {
			echo "This is the test 3";
		}
		
		ways::bootstrap();
	}), 
	function(){
		if (!isset($_SESSION['user']))
		{
			echo "You are not a tester";
			return false;
		}
		return true;
	});

// route to a static method
ways::bootstrap("_url", "home");
Copy<br>.htaccess<br>RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]
Copy]]></description><link>documentation\div-php-ways\call-a-static-method.html</link><guid isPermaLink="false">Documentation/Div PHP Ways/Call a static method.md</guid><pubDate>Sat, 16 Mar 2024 18:24:32 GMT</pubDate></item><item><title><![CDATA[CLI app]]></title><description><![CDATA[ 
 <br>&lt;?php

// say me hello
// $ php one_script.php hello Peter
ways::listen("/hello/{name}", function ($data = [], $args = []) {
	echo "Hello {$args['name']}\n";
});
Copy]]></description><link>documentation\div-php-ways\cli-app.html</link><guid isPermaLink="false">Documentation/Div PHP Ways/CLI app.md</guid><pubDate>Sun, 28 Jan 2024 14:00:27 GMT</pubDate></item><item><title><![CDATA[Div PHP Ways]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://github.com/anuraghazra/github-readme-stats" rel="noopener" class="external-link" href="https://github.com/anuraghazra/github-readme-stats" target="_blank"></a><img alt="Readme Card" src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=ways&amp;show_owner=true&amp;rand=23" referrerpolicy="no-referrer"><br><a data-href="Introduction to Div PHP Ways" href="\documentation\div-php-ways\introduction-to-div-php-ways.html" class="internal-link" target="_self" rel="noopener">Introduction to Div PHP Ways</a><br>
<a data-href="Documentation/Div PHP Ways/Getting started" href="\documentation\div-php-ways\getting-started.html" class="internal-link" target="_self" rel="noopener">Documentation/Div PHP Ways/Getting started</a><br>
<a data-href="Call a static method" href="\documentation\div-php-ways\call-a-static-method.html" class="internal-link" target="_self" rel="noopener">Call a static method</a><br>
<a data-href="CLI app" href="\documentation\div-php-ways\cli-app.html" class="internal-link" target="_self" rel="noopener">CLI app</a><br>
<a data-href="Get controller properties" href="\documentation\div-php-ways\get-controller-properties.html" class="internal-link" target="_self" rel="noopener">Get controller properties</a>]]></description><link>documentation\div-php-ways\div-php-ways.html</link><guid isPermaLink="false">Documentation/Div PHP Ways/Div PHP Ways.md</guid><pubDate>Sat, 16 Mar 2024 18:23:38 GMT</pubDate><enclosure url="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=ways&amp;show_owner=true&amp;rand=23" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=divengine&amp;repo=ways&amp;show_owner=true&amp;rand=23"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Get controller properties]]></title><description><![CDATA[ 
 <br>&lt;?php

$property = "This is a property value";

ways::listen("/", function ($data = [], $args = [], $properties = []) {
	echo "Controller ID = " . $properties['id'] . "\n";
	echo "A controller property = " . $properties['myProperty'];

}, [
	'myProperty' =&gt; $property,
]);
Copy]]></description><link>documentation\div-php-ways\get-controller-properties.html</link><guid isPermaLink="false">Documentation/Div PHP Ways/Get controller properties.md</guid><pubDate>Sun, 28 Jan 2024 14:00:46 GMT</pubDate></item><item><title><![CDATA[Getting started]]></title><description><![CDATA[ 
 <br><br>With composer...<br>composer require divengine/ways
Copy<br>Without composer, download the class and...<br>include "path/to/divengine/ways.php";
Copy<br><br>&lt;?php

// arbitrary location for software's packages
define('PACKAGES', 'path/to/app/');

use divengine\ways;

// ways with closure
ways::listen("get://home", function($data){
	echo "Hello {$data['user']}";
}, "home");

// add a hook
ways::hook(DIV_WAYS_BEFORE_RUN, "home", function($data){
	$data['user'] = "Peter";
});

// listen... 
$data = ways::bootstrap('_url', 'home');
Copy]]></description><link>documentation\div-php-ways\getting-started.html</link><guid isPermaLink="false">Documentation/Div PHP Ways/Getting started.md</guid><pubDate>Sun, 28 Jan 2024 13:59:30 GMT</pubDate></item><item><title><![CDATA[Introduction to Div PHP Ways]]></title><description><![CDATA[ 
 <br><img alt="Div PHP Ways Overview.png" src="\lib\media\div-php-ways-overview.png"><br>
A "way" is different to a "route". We need a path for found a specific resource, but we need a way for do something. This library follow this concept when implements the routing and control of PHP application.<br>Ways is a class that adapts the concept of SOA to the architecture of a PHP application, and tries to integrate the parts of a hybrid system.<br>With Ways you should think more about "control points" than on controllers of an MVC pattern. Control points are activated when they are needed, ie on demand, depending on the definition you have made.<br>In addition to this, a control point may require the previous execution of another control point. You can also implement events or hooks, so you can execute one control point before or after another, without the latter knowing the existence of the first. These flexibilities are valid for example in a plugins architecture.<br>The control points can interact, and this means, redirect the flow to another, call control points directly, exchange data and url arguments, handle the output on screen, etc.<br>Div Ways is not only intended for the web but also for command line applications. Div Ways is implemented in a single class, in a single file. This allows quick start-up and easy adaptation with other platforms.]]></description><link>documentation\div-php-ways\introduction-to-div-php-ways.html</link><guid isPermaLink="false">Documentation/Div PHP Ways/Introduction to Div PHP Ways.md</guid><pubDate>Wed, 31 Jan 2024 04:11:08 GMT</pubDate><enclosure url="lib\media\div-php-ways-overview.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\div-php-ways-overview.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Documentation]]></title><description><![CDATA[ 
 <br>
<br><a data-href="Div PHP Template Engine" href="\documentation\div-php-template-engine\div-php-template-engine.html" class="internal-link" target="_self" rel="noopener">Div PHP Template Engine</a>
<br><a data-href="Div PHP Ajax Mapping" href="\documentation\div-php-ajax-mapping\div-php-ajax-mapping.html" class="internal-link" target="_self" rel="noopener">Div PHP Ajax Mapping</a>
<br><a data-href="Div PHP Enum Solution" href="\documentation\div-php-enum-solution\div-php-enum-solution.html" class="internal-link" target="_self" rel="noopener">Div PHP Enum Solution</a>
<br><a data-href="Div PHP Ways" href="\documentation\div-php-ways\div-php-ways.html" class="internal-link" target="_self" rel="noopener">Div PHP Ways</a>
<br><a data-href="Div PHP ORM" href="\documentation\div-php-orm\div-php-orm.html" class="internal-link" target="_self" rel="noopener">Div PHP ORM</a>
<br><a data-href="Div PHP Matrix" href="\documentation\div-php-matrix\div-php-matrix.html" class="internal-link" target="_self" rel="noopener">Div PHP Matrix</a>
]]></description><link>documentation\documentation.html</link><guid isPermaLink="false">Documentation/Documentation.md</guid><pubDate>Tue, 30 Jan 2024 22:23:11 GMT</pubDate></item><item><title><![CDATA[The Div Dialect Creator Tool]]></title><description><![CDATA[ 
 <br><br>You can create infinite dialects for the template language of Div PHP Template Engine. This tool help you for this goal.<br><a data-tooltip-position="top" aria-label="https://dialector.divengine.org/" rel="noopener" class="external-link" href="https://dialector.divengine.org/" target="_blank">https://dialector.divengine.org</a>]]></description><link>tools\dialector.html</link><guid isPermaLink="false">Tools/Dialector.md</guid><pubDate>Sun, 28 Jan 2024 17:27:30 GMT</pubDate></item><item><title><![CDATA[Tools]]></title><description><![CDATA[ 
 <br>
<br><a data-href="Dialector" href="\tools\dialector.html" class="internal-link" target="_self" rel="noopener">Dialector</a>
]]></description><link>tools\tools.html</link><guid isPermaLink="false">Tools/Tools.md</guid><pubDate>Wed, 31 Jan 2024 04:13:48 GMT</pubDate></item><item><title><![CDATA[Div PHP Matrix - Basic features]]></title><description><![CDATA[ 
 <br><br>Welcome to the fundamentals of <a data-href="Div PHP Matrix" href="\documentation\div-php-matrix\div-php-matrix.html" class="internal-link" target="_self" rel="noopener">Div PHP Matrix</a>! In this video, we'll explore the core functionalities of this dynamic matrix manipulation class in PHP. Learn how to effortlessly retrieve and store values in cells, add new columns and rows to your matrices, and witness the magic of dynamic and automatic cell calculations. ]]></description><link>videos\div-php-matrix-basic-features.html</link><guid isPermaLink="false">Videos/Div PHP Matrix - Basic features.md</guid><pubDate>Sat, 24 Feb 2024 02:21:13 GMT</pubDate></item><item><title><![CDATA[Videos]]></title><description><![CDATA[ 
 <br>
<br><a data-href="Div PHP Matrix - Basic features" href="\videos\div-php-matrix-basic-features.html" class="internal-link" target="_self" rel="noopener">Div PHP Matrix - Basic features</a>
]]></description><link>videos\videos.html</link><guid isPermaLink="false">Videos/Videos.md</guid><pubDate>Sat, 24 Feb 2024 02:21:13 GMT</pubDate></item></channel></rss>